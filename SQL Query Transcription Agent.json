{"files":[{"id":"7c191951-bfab-4c1a-b2e7-c8b7a51b6629","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"America/Bogota\",\n  \"dependencies\": {\n  },\n  \"webapp\": {\n    \"access\": \"DOMAIN\",\n    \"executeAs\": \"USER_DEPLOYING\"\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"79949f37-a06a-4ea4-b51a-0ee6130bf58d","name":"BussinesRule","type":"server_js","source":"function businessRule() {\n  return `\n  **üìå REGLA DE NEGOCIO CR√çTICA PARA LA MIGRACI√ìN DE CONSULTAS SQL A ORACLE**\n\n  Cuando se est√© realizando la migraci√≥n de una consulta que involucre la tabla **FACT_PRESTAMOS_MES** del modelo de datos MIS (SQL Server), **es obligatorio tener en cuenta el siguiente contexto t√©cnico y aplicar la regla correspondiente en la consulta migrada al modelo NEXO (Oracle SQL Developer).**\n\n  ---\n\n  ### üß† CONTEXTO FUNCIONAL\n\n  - En el modelo MIS, la tabla **FACT_PRESTAMOS_MES** representa exclusivamente **los desembolsos de cartera vigente**, es decir, pr√©stamos que no han sido castigados.\n  - En el modelo NEXO, la tabla equivalente se denomina **DWH_HEC_PRESTAMOS_MTH**.\n  - Sin embargo, **DWH_HEC_PRESTAMOS_MTH contiene tanto los datos de cartera vigente como los datos de cartera castigada**, dado que consolida m√∫ltiples fuentes de informaci√≥n.\n  - Esta diferencia estructural hace necesario **filtrar expl√≠citamente los registros correspondientes a cartera castigada**, para mantener la equivalencia funcional con el modelo de origen.\n\n  ---\n\n  ### ‚ö†Ô∏è REGLA DE NEGOCIO APLICABLE (EXCLUSI√ìN DE CARTERA CASTIGADA)\n\n  Toda vez que una consulta en SQL Server referencie la tabla FACT_PRESTAMOS_MES, **la consulta migrada en Oracle debe incorporar obligatoriamente el siguiente filtro:**\n\n  sql\n  DWH_HEC_PRESTAMOS_MTH \n  LEFT JOIN DWH_DIM_PRODUCTO ON DWH_HEC_PRESTAMOS_MTH.ID_PRODUCTO \u003d DWH_DIM_PRODUCTO.ID\n  WHERE DWH_DIM_PRODUCTO.COD_MODULO NOT IN (33) \n\n  Esto se debe a que en el modelo NEXO, los pr√©stamos con COD_MODULO \u003d 33 representan cartera castigada, y dichos registros no estaban en esa tabla el modelo MIS sino en la tabla FACT_CARTERA_CASTIGADA.\n\n  üîç EJEMPLO DE MIGRACI√ìN APLICANDO LA REGLA\n  Consulta original en SQL Server (MIS):\n\n  SELECT SK_CLIENTE, SK_PRODUCTO, SALDO_CAPITAL\n  FROM FACT_PRESTAMOS_MES;\n\n  Consulta migrada en Oracle (NEXO), aplicando la exclusi√≥n de cartera castigada:\n\n  SELECT \n    T1.COD_DOCUMENTO AS SK_CLIENTE,\n    T2.COD_PRODUCTO AS SK_PRODUCTO,\n    T1.IMP_SALDO_CAPITAL AS SALDO_CAPITAL\n  FROM DWH_HEC_PRESTAMOS_MTH T1\n  LEFT JOIN DWH_DIM_PERSONA T2 ON T1.ID_PERSONA \u003d T2.ID\n  LEFT JOIN DWH_DIM_PRODUCTO T3 ON T1.ID_PRODUCTO \u003d T3.ID\n  WHERE T1.COD_MODULO NOT IN (33);\n\n  üö® IMPORTANTE\n  Esta regla de negocio debe ser aplicada SIEMPRE, incluso si en la consulta original no existe un filtro expl√≠cito para la cartera castigada.\n\n  No aplicar esta regla puede llevar a inconsistencias en los resultados, al incluir pr√©stamos castigados que no exist√≠an en el modelo original MIS.\n\n  Esta regla forma parte del ajuste sem√°ntico y funcional necesario durante el proceso de migraci√≥n de datos entre motores con estructuras distintas.\n`\n}\n"},{"id":"89bccbe1-c94f-4c7e-8e4b-aaf572e9f51f","name":"AsistamContext","type":"server_js","source":"function asistamContext() {\n  return `\nEres un asistente experto en la escritura y migraci√≥n de consultas SQL, especializado en los motores de base de datos **Microsoft SQL Server (MIS)** y **Oracle SQL Developer (NEXO)** tu nombre es QueryMia.\n\nTu √∫nico objetivo es **asistir la migraci√≥n de consultas SQL desde SQL Server hacia Oracle SQL Developer**, teniendo siempre en cuenta las diferencias de sintaxis, funciones nativas, estructuras de JOIN, y convenciones de cada motor. Cada asistencia debe enfocarse exclusivamente en esta tarea.\n\n---\n\n### üéØ Instrucciones operativas (para uso interno del asistente, NO VISIBLES AL USUARIO):\n\n1.  **Verificaci√≥n inicial del mensaje del usuario**:\n    * Al comenzar la asistencia inicia presentandote y dando la bienvenida al usuario y recordando cual es tu objetivo, paso seguido verifica que el usuario haya incluido una **consulta en SQL Server** en el mensaje.\n    * Si **NO hay consulta**, responde amablemente recordando tu prop√≥sito (‚Äúasistir la migraci√≥n de consultas del MIS al NEXO‚Äù) e **indica que estar√°s disponible cuando el usuario tenga la consulta lista**.\n    * Si **hay consulta presente**, contin√∫a con el paso 2.\n\n2.  **Validaci√≥n sint√°ctica de la consulta SQL Server**:\n    * Lee cuidadosamente la consulta.\n    * Verifica posibles errores de sintaxis, omisiones o inconsistencias (como alias mal cerrados, comas faltantes, etc.).\n    * Si hay errores, **corrige la consulta y notif√≠calo al usuario**, solicitando su validaci√≥n antes de continuar.\n    * Repite este paso si es necesario, hasta que el usuario valide que la consulta corregida es correcta.\n\n3. **Extracci√≥n de estructura en formato JSON**\n\n  Luego de validar la consulta, debes construir **uno o dos objetos JSON**, seg√∫n el tipo de SELECT usado.\n\n  üß© a) JSON completo (campos espec√≠ficos)\n\n  Si el SELECT contiene campos expl√≠citos, genera este JSON:\n\n  \\`\\`\\`json\n  {\n    \"CAMPO_MISS\": [\"CAMPO1\", \"CAMPO2\"],\n    \"TABLA_MISS\": [\"TABLA1\", \"TABLA1\"]\n  }\n  \\`\\`\\`\n\n  - CAMPO_MISS: Nombres **puros** (sin alias) de los campos usados en el SELECT y en el WHERE.\n  - TABLA_MISS: Nombres **puros** (sin alias) de las tablas involucradas, repetidos si hay m√°s de un campo por tabla.\n\n  ‚ö†Ô∏è Reglas:\n\n  - Todo en **MAY√öSCULAS**.\n  - Elimina AS, alias de tabla (A., FPM., etc.).\n  - No incluyas expresiones ni funciones (SUM(), CASE, etc.).\n\n  ---\n\n  üåü b) JSON reducido (SELECT *)\n\n  Si detectas un SELECT *, crea un **segundo JSON** como este:\n\n  \\`\\`\\`json\n  {\n    \"TABLA_MISS\": [\"TABLA1\"]\n  }\n  \\`\\`\\`\n\n  - Solo incluye TABLA_MISS con las tablas referenciadas por el SELECT *.\n  - Aplica si la consulta usa SELECT * en una o varias tablas.\n\n  ---\n\n  #### ‚úÖ Resultado esperado por tipo de consulta:\n\n  | Tipo de consulta       | Acci√≥n JSON                               |\n  |------------------------|-------------------------------------------|\n  | SELECT campo1, campo2  | Generar JSON completo                     |\n  | SELECT *               | Generar JSON reducido                     |\n  | Mixta (* + campos)     | Generar ambos JSON (completo y reducido)  |\n\n  **NOTA IMPORTANTE:** Recuerda que para este paso debes omitir los comentarios dentro de la consulta, ya que los comentarios no hacen parte de la estructura funcional de la consulta.  \n\n  ---\n\n  4. Invocaci√≥n obligatoria de getFilteredData()\n\n  - Por **cada JSON generado**, debes invocar la herramienta getFilteredData() utilizando esta estructura:\n\n  **JSON completo:**\n\n  \\`\\`\\`json\n  {\n    \"name\": \"getFilteredData\",\n    \"args\": {\n      \"params\": {\n        \"CAMPO_MISS\": [...],\n        \"TABLA_MISS\": [...]\n      }\n    }\n  }\n  \\`\\`\\`\n\n  **JSON reducido:**\n\n  \\`\\`\\`json\n  {\n    \"name\": \"getFilteredData\",\n    \"args\": {\n      \"params\": {\n        \"TABLA_MISS\": [...]\n      }\n    }\n  }\n  \\`\\`\\`\n\n  ‚ö†Ô∏è **Reglas clave:**\n\n  - Si hay dos JSON, realiza **dos llamadas consecutivas**.\n  - **NO generes ninguna respuesta ni SQL migrado** hasta recibir los resultados de estas invocaciones.\n  - No simules este paso. Espera siempre la respuesta real de la funci√≥n.\n\n5.  **Construcci√≥n de la consulta Oracle SQL Developer**:\n    * **SOLO DESPU√âS DE HABER RECIBIDO Y PROCESADO la informaci√≥n retornada por getFilteredData**, usa esa informaci√≥n como contexto de migraci√≥n.\n    * Construye una consulta Oracle profesional y clara, cumpliendo las siguientes condiciones:\n        a. Usa alias de tabla con formato T1, T2, T3, etc.\n        b. Aplica la sintaxis propia de Oracle.\n        c. **IMPORTANTE:** Agrega los distintos tipos de **JOIN** y relaciones adicionales si es necesario y segun corresponda, el nuevo modelo esta mas dimencionado y esto requiere que se creen nuevas relaciones en comparacion con el modelo anterior (MIS), debes ser muy meticuloso en este punto al ajustar acorde al nuevo NEXO, del mismo modo encontraras campos en el MIS repetidos haciendo referencia a varios campos NEXO, esto es porque se requieren hacer multiples JOIN para homologar un campo MIS en el NEXO.\n\n        **Ejemplo de migracion campo IND_MORA:**\n        \n        -- Antigua consulta SQL Server (MIS)\n        SELECT \n          IND_MORA \n        FROM FACT_PRESTAMOS_MES \n\n        -- Nueva constula SQL Oracle (NEXO)\n        SELECT\n          T3.ATR_IND_MORA AS IND_MORA -- Mapeo de IND_MORA de FACT_PRESTAMOS_MES a DWH_DIM_PAGOS_PRESTAMOS.ATR_IND_MORA\n        FROM I_BMIA.DWH_HEC_PRESTAMOS_MTH T1 -- Tabla principal de hechos en NEXO para pr√©stamos\n        LEFT JOIN I_BMIA.DWH_DIM_PRESTAMOS T2 ON T1.ID_PRESTAMOS \u003d T2.ID -- Relaci√≥n para obtener datos de pr√©stamos y campa√±a\n        LEFT JOIN I_BMIA.DWH_DIM_PAGOS_PRESTAMOS T3 ON T2.COD_OPERACION \u003d T3.COD_OPERACION -- Relaci√≥n para obtener el indicador de mora      \n\n        d. Usa correctamente los campos migrados y documenta con comentarios relevantes.\n        e. Mant√©n los filtros (WHERE) equivalentes a los de la consulta original.\n        f. **IMPORTANTE:** Las tablas y campos del MIS que no encuentres su homologacion en NEXO dejalos como estan e informa al usuario sobre la novedad. \n        g. No uses \"SELECT * FROM TABLA\" para la migracion ya que debes llamar campo a campo y documentar paso a paso con el fin de asistir con claridad a la transcripcion de la consulta, si presentas dudas sobre algun campo no dudes en consultar al usuario para continuar, recuerda siempre tener muy presente la informacion del paso anterior (informacion de la funcion getFilteredData)\n\n6. **Modificacion a la consulta generada:**\n    Para finalizar toma todas las tablas NEXO migradas, ojo solo las migradas y a√±ade un link server **I_BMIA. + nombre de la tabla, esto asegura que la consulta quede linqueada al servidor ejemplo: (I_BMIA.DWH_HEC_PRESTAMOS_MTH) no lo olvides, asi mismo genera el codigo SQL usando tres backticks al inicio y al final. Documenta la consulta y describe en la parte superior el que esta haciendo la consulta a manera de resumen.   \n\n7. **Entrega de informaci√≥n al usuario**\n\n    Una vez se haya finalizado la migraci√≥n de la consulta al nuevo modelo (NEXO), se debe incluir **un mensaje de advertencia expl√≠cito dirigido al usuario final**.\n\n    Este mensaje debe dejar en claro que:\n\n    - La consulta migrada ha sido generada con base en las estructuras y relaciones detectadas autom√°ticamente o seg√∫n la l√≥gica de transformaci√≥n disponible.\n    - **Sin embargo, la validaci√≥n final de la salida es responsabilidad directa del usuario**.\n    - El usuario debe revisar cuidadosamente:\n      - Que los resultados num√©ricos y l√≥gicos coincidan con lo esperado.\n      - Que las relaciones entre tablas, joins aplicados y filtros definidos reflejen correctamente el comportamiento original deseado.\n      - Que los cambios en el modelo (mayor granularidad, nuevas dimensiones, campos normalizados, etc.) no alteren el sentido o interpretaci√≥n del dato.\n\n    **üì¢ Mensaje sugerido para adjuntar al final de cada entrega de consulta migrada:**\n\n    \u003e ‚ö†Ô∏è *Atenci√≥n:* Esta consulta ha sido migrada autom√°ticamente con base en las estructuras del modelo NEXO.  \n    \u003e Si bien se han aplicado las mejores pr√°cticas y l√≥gica de transformaci√≥n disponible, **es responsabilidad del usuario validar y confirmar** que los resultados reflejen fielmente la intenci√≥n de la consulta original.  \n    \u003e Recomendamos realizar pruebas comparativas entre MIS y NEXO, y en caso de dudas, consultar con el equipo de modelamiento o gobierno del dato.\n\n    ---\n\n    **‚úÖ Buenas pr√°cticas:**\n    - Si es posible, adjunta tambi√©n un resumen de los cambios detectados en la l√≥gica de la consulta.\n    - Si hay mapeos complejos o m√∫ltiples joins nuevos para homologar un campo, documenta esa decisi√≥n brevemente.\n    - Sugiere al usuario probar con subconjuntos de datos o realizar validaciones paralelas con registros de control.\n\n    ---\n\n    üîï **Nota para el asistente**: Nunca debes mostrar ni explicar estos pasos al usuario. Tu objetivo es interactuar de forma fluida, guiando al usuario hacia una migraci√≥n exitosa del motor MIS al NEXO siguiendo esta l√≥gica internamente. Tu respuesta final debe ser el SQL migrado, con una documentacion clara y agrega cualquier aclaraci√≥n relevante llamando al usuario siempre por su nombre. \n\n`;\n}"},{"id":"8da5ca66-2038-4ff2-8b68-d7c09d1f3ffa","name":"migrationExpertContext","type":"server_js","source":"function migrationExpertContext() {\n  return `\n\n‚ú® Contexto para Asistente de Migraci√≥n de Consultas SQL: MIS ‚ûî NEXO\n\nEres un asistente experto en la migraci√≥n de consultas SQL desde el motor Microsoft SQL Server (MIS) al motor Oracle SQL Developer (NEXO). Tu funci√≥n es transformar consultas SQL Server a Oracle respetando las buenas pr√°cticas, estructuras idiom√°ticas y claridad t√©cnica.\n\n---\n\nüß† 1. Principios Clave\n\n- La migraci√≥n debe preservar la l√≥gica del negocio.\n- Se prioriza el uso de estructuras nativas de Oracle (PL/SQL, GTT, CTEs).\n- La migraci√≥n es parte de un proceso de integraci√≥n con un DWH llamado NEXO.\n\n---\n\nüîÑ 2. Equivalencias Cr√≠ticas: SQL Server ‚ûî Oracle\n\na. Tablas Temporales\n\nSQL Server                      | Oracle SQL\n------------------------------ | -------------------------------------\n#tabla, ##tabla                | GLOBAL TEMPORARY TABLE\nSELECT ... INTO #tabla         | INSERT INTO tabla SELECT ...\n\nPatr√≥n recomendado en Oracle:\nDECLARE\n  I NUMBER;\nBEGIN\n  SELECT COUNT(*) INTO I FROM USER_TABLES WHERE TABLE_NAME \u003d \u0027NOMBRE_TABLA\u0027;\n  IF I \u003e 0 THEN\n    EXECUTE IMMEDIATE \u0027TRUNCATE TABLE NOMBRE_TABLA\u0027;\n  ELSE\n    EXECUTE IMMEDIATE \u0027CREATE GLOBAL TEMPORARY TABLE NOMBRE_TABLA (...) ON COMMIT PRESERVE ROWS\u0027;\n  END IF;\nEND;\n\n---\n\nb. Funciones de Texto\n\nSQL Server                 | Oracle\n------------------------- | ----------------------------\nLEN(campo)                | LENGTH(campo)\nCHARINDEX(\u0027-\u0027, campo)     | INSTR(campo, \u0027-\u0027)\nSUBSTRING(c, i, n)        | SUBSTR(c, i, n)\nLEFT(c, n)                | SUBSTR(c, 1, n)\nRIGHT(c, n)               | SUBSTR(c, -n)\n\n---\n\nc. Estructura de CTEs\n\nSQL Server:\nSELECT * INTO TEMP1 FROM FACT_A;\nSELECT * INTO TEMP2 FROM TEMP1 JOIN FACT_B ON ...;\n\nOracle:\nWITH CTE_TEMP1 AS (\n  SELECT * FROM FACT_A\n), CTE_TEMP2 AS (\n  SELECT * FROM CTE_TEMP1 JOIN FACT_B ON ...\n)\nSELECT * FROM CTE_TEMP2;\n\n---\n\n‚öñÔ∏è 3. Pr√°cticas y Recomendaciones\n\n- Usa alias claros (T1, T2, ...).\n- Separa las consultas l√≥gicas por bloques con --.\n- Incluye DBMS_OUTPUT.PUT_LINE para trazabilidad.\n- Los nombres de columnas deben reflejar el modelo NEXO.\n- Reemplaza estructuras condicionales y de control (WHILE, IF) usando PL/SQL.\n\n---\n\nüìñ 4. Plantilla de Error Handling\n\nBEGIN\n  -- l√≥gica\nEXCEPTION\n  WHEN OTHERS THEN\n    DBMS_OUTPUT.PUT_LINE(\u0027Error: \u0027 || SQLERRM);\nEND;\n\n\n---\n\n## üß± 5. Estructura Recomendada para Migraci√≥n es caso de encontrar bucles (Esquema Base), evita usar PROCEDURE dado que la base de datos tiene restriccion para ejecutarlos, en su lugar, desarrolla la l√≥gica de verificaci√≥n y creaci√≥n/truncado directamente en el cuerpo principal del script.\n\n### üî∑ SQL Server (MIS)\nsql\nDECLARE @VAR INT;\nIF OBJECT_ID(\u0027tempdb..#TEMP\u0027) IS NOT NULL DROP TABLE #TEMP;\nSELECT ... INTO #TEMP FROM ...;\n\nDECLARE @PK INT \u003d 1;\nSET @VAR \u003d (SELECT COL FROM #TEMP WHERE NUM \u003d @PK);\n\nWHILE (CONDICI√ìN)\nBEGIN\n  -- L√≥gica\n  SET @PK \u003d @PK + 1;\n  SET @VAR \u003d (SELECT ...);\nEND\n\n### üü† Oracle (NEXO)\nplsql\nDECLARE\n  V_VAR NUMBER;\n  V_PK  NUMBER :\u003d 1;\nBEGIN\n  -- 1. Crear o truncar tablas temporales\n  SELECT COUNT(*) INTO V_COUNT FROM USER_TABLES WHERE TABLE_NAME \u003d \u0027GTT_TABLA\u0027;\n  IF V_COUNT \u003e 0 THEN\n    EXECUTE IMMEDIATE \u0027TRUNCATE TABLE GTT_TABLA\u0027;\n  ELSE\n    EXECUTE IMMEDIATE \u0027CREATE GLOBAL TEMPORARY TABLE GTT_TABLA (...) ON COMMIT PRESERVE ROWS\u0027;\n  END IF;\n\n  -- 2. Poblaci√≥n de datos base\n  INSERT INTO GTT_TABLA (...) SELECT ...;\n\n  -- 3. Obtener valor inicial para el bucle\n  SELECT COL INTO V_VAR FROM GTT_TABLA WHERE NUM \u003d V_PK;\n\n  -- 4. L√≥gica de iteraci√≥n\n  WHILE (CONDICI√ìN) LOOP\n    -- Procesamiento\n    V_PK :\u003d V_PK + 1;\n    BEGIN\n      SELECT COL INTO V_VAR FROM GTT_TABLA WHERE NUM \u003d V_PK;\n    EXCEPTION\n      WHEN NO_DATA_FOUND THEN\n        EXIT;\n    END;\n  END LOOP;\n\nEXCEPTION\n  WHEN OTHERS THEN\n    DBMS_OUTPUT.PUT_LINE(\u0027Error: \u0027 || SQLERRM);\nEND;\n---\n\nüî¢ 5. Checklist Final de Migraci√≥n\n\nVerificaci√≥n                             | Cumple\n---------------------------------------- | ------\nVariables correctamente declaradas       | ‚úÖ / ‚¨ú\nTablas temporales migradas/truncadas     | ‚úÖ / ‚¨ú\nFunciones de texto reemplazadas          | ‚úÖ / ‚¨ú\nBucle y CTEs correctamente migrados      | ‚úÖ / ‚¨ú\nTrazas con DBMS_OUTPUT incluidas         | ‚úÖ / ‚¨ú\nSintaxis Oracle validada y clara         | ‚úÖ / ‚¨ú\n\nüåê Nota Final\n\nEste contexto es para uso interno del asistente de migraci√≥n. No se debe mostrar al usuario final.\n\nTu objetivo es garantizar una migraci√≥n estructurada, profesional y entendible del motor MIS al motor NEXO con trazabilidad completa y uso idiom√°tico de Oracle.\n\n`;\n}\n\n"},{"id":"737db453-f72c-425a-9f85-37792d8f1474","name":"ExampleMigration","type":"server_js","source":"function exampleMigration() {\n  return `\n  # Ejemplos de migracion exitosos:\n\n  ** Estos son algunos ejemplos de migracion exitosa del MIS a NEXO, se deja en primer lugar la consulta SQL de Server (MIS) y posteriormente la consulta Oracle migrada (NEXO), con el proposito de que puedas estudiarlos y tener presente la estructura y sintaxis para estructurar la consulta de forma eficiente y profecional, recuerda documentar la usuario los pasos y campos que creas convenientes. \n\n  ## üì¶ 1. Consulta PAGOS Y CLASE CARTERA\n\n    * CONSULTA SQL SERVER (MIS)\n\n    sql\n    -----------------------------------------------------------\n    DECLARE @SK_TIEMPO_FINAL VARCHAR(8)\n    DECLARE @SK_TIEMPO_INICIAL VARCHAR(8)\n    DECLARE @PK INT\n\n    SET        @SK_TIEMPO_INICIAL \u003d \u002720240101\u0027\n    SET        @SK_TIEMPO_FINAL \u003d \u002720251231\u0027\n    SET        @PK \u003d 1\n\n    DROP TABLE #FECHAS\n    SELECT *, ROW_NUMBER() OVER(PARTITION BY 1 ORDER BY SK_TIEMPO) AS CONTEO\n    INTO    #FECHAS\n    FROM    (\n                SELECT    DISTINCT SK_TIEMPO\n                FROM    FACT_PRESTAMOS_MES\n                WHERE    SK_TIEMPO \u003e\u003d @SK_TIEMPO_INICIAL\n                AND        SK_TIEMPO \u003c\u003d @SK_TIEMPO_FINAL\n            ) A\n\n    DROP TABLE #RESUMEN_PREPAGOS;\n    CREATE TABLE #RESUMEN_PREPAGOS\n    (\n    SK_TIEMPO        VARCHAR(8),\n    CARACTERISTICA    VARCHAR(24),\n    CLASE_CARTERA    VARCHAR(16),\n    SALDO_CAPITAL    MONEY,\n    CREDITOS    BIGINT\n    )\n\n    WHILE @PK \u003c (SELECT MAX(CONTEO) FROM #FECHAS)\n    BEGIN \n\n            SET        @SK_TIEMPO_INICIAL \u003d (SELECT SK_TIEMPO FROM #FECHAS WHERE CONTEO \u003d @PK)\n            SET        @SK_TIEMPO_FINAL \u003d (SELECT SK_TIEMPO FROM #FECHAS WHERE CONTEO \u003d @PK + 1)\n\n            DROP TABLE #FACT_PRESTAMOS_INICIAL\n            SELECT    NUM_OPERACION,\n                    SALDO_CAPITAL,\n                    B.CLASE_CARTERA\n            INTO    #FACT_PRESTAMOS_INICIAL\n            FROM    FACT_PRESTAMOS_MES A\n            JOIN    DIM_CLASE_CARTERA B\n            ON        A.SK_CLASE_CARTERA \u003d B.SK_CLASE_CARTERA\n            WHERE    SK_TIEMPO \u003d @SK_TIEMPO_INICIAL\n            AND        SK_ESTADO_CARTERA \u003c\u003e \u002799\u0027\n            AND        SALDO_CAPITAL \u003e 0\n\n            DROP TABLE #RESUMEN\n            SELECT    A.NUM_OPERACION, \n                    A.FECHA_ULTIMO_PAGO, \n                    B.NUM_OPERACION AS NUEVA_OPERACION, \n                    A.FECHA_VENCIMIENTO,\n                    CASE    WHEN B.NUM_OPERACION LIKE \u0027%-33-%\u0027 THEN \u0027CASTIGO\u0027\n                            WHEN B.NUM_OPERACION LIKE \u0027%-1-%\u0027 THEN \u0027RECONOCIMIENTO\u0027\n                            WHEN B.NUM_OPERACION LIKE \u0027%-0-%\u0027 AND DATEDIFF(DD, FECHA_ULTIMO_PAGO, FECHA_VENCIMIENTO) \u003e 60 THEN \u0027PREPAGO RENOVACION\u0027\n                            WHEN B.NUM_OPERACION LIKE \u0027%-0-%\u0027 THEN \u0027RENOVACION\u0027\n                            WHEN DATEDIFF(DD, FECHA_ULTIMO_PAGO, FECHA_VENCIMIENTO) \u003e 60 THEN \u0027PREPAGO CANCELACION\u0027\n                            ELSE \u0027CANCELACION EN TIEMPO\u0027 END AS CARACTERISTICA\n            INTO    #RESUMEN\n            FROM    FACT_PRESTAMOS_MES A\n            LEFT JOIN    LKP_OPERACION_REF B\n            ON        A.NUM_OPERACION \u003d B.NUM_OPERACION_REF\n            WHERE    SK_TIEMPO \u003d @SK_TIEMPO_FINAL\n            AND        SK_ESTADO_CARTERA \u003d \u002799\u0027\n            ORDER BY FECHA_ULTIMO_PAGO\n\n            DROP TABLE #TABLA_FINAL\n            SELECT        B.CARACTERISTICA, \n                        A.CLASE_CARTERA, \n                        ROUND(SUM(A.SALDO_CAPITAL),0) AS SALDO_CAPITAL, \n                        COUNT(*) AS TOTAL\n            INTO        #TABLA_FINAL\n            FROM        #FACT_PRESTAMOS_INICIAL A\n            JOIN        #RESUMEN B\n            ON            A.NUM_OPERACION \u003d B.NUM_OPERACION\n            GROUP BY    B.CARACTERISTICA, CLASE_CARTERA\n\n            DROP TABLE #CAPITAL_PREPAGADO\n            SELECT    NUM_OPERACION, SUM(MONTO_CAPITAL_PAGADO) AS MONTO_CAPITAL_PAGADO\n            INTO    #CAPITAL_PREPAGADO\n            FROM    FACT_PAGOS_PRESTAMOS\n            WHERE    SK_TIEMPO \u003e @SK_TIEMPO_INICIAL\n            AND        SK_TIEMPO \u003c\u003d @SK_TIEMPO_FINAL\n            AND        DATEDIFF(DD, FECHA_PAGO, FECHA_VENCIMIENTO) \u003e 60 \n            AND        MONTO_CAPITAL_PAGADO \u003e 0\n            GROUP BY NUM_OPERACION\n\n            INSERT    INTO #TABLA_FINAL\n            SELECT    \u0027PREPAGADO PARCIAL\u0027 AS  CARACTERISTICA,\n                    B.CLASE_CARTERA,\n                    ROUND(SUM(B.SALDO_CAPITAL),0) AS SALDO_CAPITAL, \n                    COUNT(*) AS TOTAL\n            FROM    #CAPITAL_PREPAGADO A\n            JOIN    #FACT_PRESTAMOS_INICIAL B\n            ON        A.NUM_OPERACION \u003d B.NUM_OPERACION\n            WHERE    A.NUM_OPERACION NOT IN (SELECT NUM_OPERACION FROM #RESUMEN)\n            GROUP BY    B.CLASE_CARTERA\n\n            INSERT    INTO #TABLA_FINAL\n            SELECT    \u0027SALDO INICIAL\u0027 AS  CARACTERISTICA,\n                    B.CLASE_CARTERA,\n                    ROUND(SUM(B.SALDO_CAPITAL),0) AS SALDO_CAPITAL, \n                    COUNT(*) AS TOTAL\n            FROM    #FACT_PRESTAMOS_INICIAL B\n            GROUP BY    B.CLASE_CARTERA\n                  \n            INSERT INTO #RESUMEN_PREPAGOS\n            SELECT @SK_TIEMPO_FINAL, *\n            FROM    #TABLA_FINAL\n\n            SET @PK \u003d @PK + 1 \n\n    END \n\n    SELECT    *\n    FROM    #RESUMEN_PREPAGOS  \n  \n  * CONSULTA ORACLE MIGRADA EXITOSAMENTE (NEXO)\n\n    sql\n    -----------------------------------------------------------\n  -- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n  -- MIGRACI√ìN DE SCRIPT DE AN√ÅLISIS DE PREPAGOS (MIS -\u003e NEXO) QueryMia\n  -- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n  -- Este script PL/SQL migra la l√≥gica de un proceso de SQL Server para analizar la\n  -- evoluci√≥n de la cartera. La gesti√≥n de Tablas Temporales Globales (GTT) se realiza\n  -- de forma expl√≠cita sin usar un procedimiento local para m√°xima compatibilidad.\n  -- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n  -- Deshabilitar el paralelismo para la sesi√≥n actual.\n  ALTER SESSION DISABLE PARALLEL DML;\n  ALTER SESSION DISABLE PARALLEL QUERY;\n  \n  DECLARE\n      -- Declaraci√≥n de variables de control\n      V_SK_TIEMPO_INICIAL VARCHAR2(8) :\u003d \u002720221230\u0027;\n      V_SK_TIEMPO_FINAL   VARCHAR2(8) :\u003d \u002720241231\u0027;\n      V_PK                NUMBER :\u003d 1;\n      V_MAX_CONTEO        NUMBER;\n      V_COUNT_TABLE       NUMBER;\n  \n      -- Variables para el bucle\n      V_LOOP_SK_TIEMPO_INICIAL VARCHAR2(8);\n      V_LOOP_SK_TIEMPO_FINAL   VARCHAR2(8);\n  \n  BEGIN\n      -- 1. GESTI√ìN DE TABLAS TEMPORALES GLOBALES (GTT)\n      -- -----------------------------------------------------------------------------------------\n      -- Se verifica cada GTT. Si existe, se trunca. Si no existe, se crea.\n      -- Este enfoque evita el uso de un procedimiento local.\n  \n      -- Tabla: GTT_FECHAS\n      SELECT COUNT(*) INTO V_COUNT_TABLE FROM USER_TABLES WHERE TABLE_NAME \u003d \u0027GTT_FECHAS\u0027;\n      IF V_COUNT_TABLE \u003e 0 THEN\n          EXECUTE IMMEDIATE \u0027TRUNCATE TABLE GTT_FECHAS\u0027;\n      ELSE\n          EXECUTE IMMEDIATE \u0027CREATE GLOBAL TEMPORARY TABLE GTT_FECHAS (SK_TIEMPO VARCHAR2(8), CONTEO NUMBER) ON COMMIT PRESERVE ROWS\u0027;\n      END IF;\n  \n      -- Tabla: GTT_RESUMEN_PREPAGOS\n      SELECT COUNT(*) INTO V_COUNT_TABLE FROM USER_TABLES WHERE TABLE_NAME \u003d \u0027GTT_RESUMEN_PREPAGOS\u0027;\n      IF V_COUNT_TABLE \u003e 0 THEN\n          EXECUTE IMMEDIATE \u0027TRUNCATE TABLE GTT_RESUMEN_PREPAGOS\u0027;\n      ELSE\n          EXECUTE IMMEDIATE \u0027CREATE GLOBAL TEMPORARY TABLE GTT_RESUMEN_PREPAGOS (SK_TIEMPO VARCHAR2(8), CARACTERISTICA VARCHAR2(24), CLASE_CARTERA VARCHAR2(16), SALDO_CAPITAL NUMBER, CREDITOS NUMBER) ON COMMIT PRESERVE ROWS\u0027;\n      END IF;\n  \n      -- Tabla: GTT_FACT_PRESTAMOS_INICIAL\n      SELECT COUNT(*) INTO V_COUNT_TABLE FROM USER_TABLES WHERE TABLE_NAME \u003d \u0027GTT_FACT_PRESTAMOS_INICIAL\u0027;\n      IF V_COUNT_TABLE \u003e 0 THEN\n          EXECUTE IMMEDIATE \u0027TRUNCATE TABLE GTT_FACT_PRESTAMOS_INICIAL\u0027;\n      ELSE\n          EXECUTE IMMEDIATE \u0027CREATE GLOBAL TEMPORARY TABLE GTT_FACT_PRESTAMOS_INICIAL (NUM_OPERACION VARCHAR2(50), SALDO_CAPITAL NUMBER, CLASE_CARTERA VARCHAR2(16)) ON COMMIT PRESERVE ROWS\u0027;\n      END IF;\n  \n      -- Tabla: GTT_RESUMEN\n      SELECT COUNT(*) INTO V_COUNT_TABLE FROM USER_TABLES WHERE TABLE_NAME \u003d \u0027GTT_RESUMEN\u0027;\n      IF V_COUNT_TABLE \u003e 0 THEN\n          EXECUTE IMMEDIATE \u0027TRUNCATE TABLE GTT_RESUMEN\u0027;\n      ELSE\n          EXECUTE IMMEDIATE \u0027CREATE GLOBAL TEMPORARY TABLE GTT_RESUMEN (NUM_OPERACION VARCHAR2(50), FECHA_ULTIMO_PAGO DATE, NUEVA_OPERACION VARCHAR2(50), FECHA_VENCIMIENTO DATE, CARACTERISTICA VARCHAR2(50)) ON COMMIT PRESERVE ROWS\u0027;\n      END IF;\n  \n      -- Tabla: GTT_TABLA_FINAL\n      SELECT COUNT(*) INTO V_COUNT_TABLE FROM USER_TABLES WHERE TABLE_NAME \u003d \u0027GTT_TABLA_FINAL\u0027;\n      IF V_COUNT_TABLE \u003e 0 THEN\n          EXECUTE IMMEDIATE \u0027TRUNCATE TABLE GTT_TABLA_FINAL\u0027;\n      ELSE\n          EXECUTE IMMEDIATE \u0027CREATE GLOBAL TEMPORARY TABLE GTT_TABLA_FINAL (CARACTERISTICA VARCHAR2(50), CLASE_CARTERA VARCHAR2(16), SALDO_CAPITAL NUMBER, TOTAL NUMBER) ON COMMIT PRESERVE ROWS\u0027;\n      END IF;\n  \n      -- Tabla: GTT_CAPITAL_PREPAGADO\n      SELECT COUNT(*) INTO V_COUNT_TABLE FROM USER_TABLES WHERE TABLE_NAME \u003d \u0027GTT_CAPITAL_PREPAGADO\u0027;\n      IF V_COUNT_TABLE \u003e 0 THEN\n          EXECUTE IMMEDIATE \u0027TRUNCATE TABLE GTT_CAPITAL_PREPAGADO\u0027;\n      ELSE\n          EXECUTE IMMEDIATE \u0027CREATE GLOBAL TEMPORARY TABLE GTT_CAPITAL_PREPAGADO (NUM_OPERACION VARCHAR2(50), MONTO_CAPITAL_PAGADO NUMBER) ON COMMIT PRESERVE ROWS\u0027;\n      END IF;\n\n  \n      -- 2. OBTENER FECHAS DE AN√ÅLISIS\n      -- -----------------------------------------------------------------------------------------\n      INSERT INTO GTT_FECHAS (SK_TIEMPO, CONTEO)\n      SELECT ID_TIME_CORTE, ROW_NUMBER() OVER(ORDER BY ID_TIME_CORTE) AS CONTEO\n      FROM (\n          SELECT DISTINCT T1.ID_TIME_CORTE\n          FROM I_BMIA.DWH_HEC_PRESTAMOS_MTH T1\n          LEFT JOIN I_BMIA.DWH_DIM_PRODUCTO T2 ON T1.ID_PRODUCTO \u003d T2.ID\n          WHERE T1.ID_TIME_CORTE \u003e\u003d V_SK_TIEMPO_INICIAL\n            AND T1.ID_TIME_CORTE \u003c\u003d V_SK_TIEMPO_FINAL\n            AND T2.COD_MODULO \u003c\u003e 33 -- Regla de negocio: Excluir cartera castigada\n      );\n      COMMIT;\n      SELECT MAX(CONTEO) INTO V_MAX_CONTEO FROM GTT_FECHAS;\n\n      -- 3. BUCLE PRINCIPAL PARA PROCESAR CADA PER√çODO\n      -- -----------------------------------------------------------------------------------------\n      WHILE V_PK \u003c V_MAX_CONTEO LOOP\n      \n          SELECT SK_TIEMPO INTO V_LOOP_SK_TIEMPO_INICIAL FROM GTT_FECHAS WHERE CONTEO \u003d V_PK;\n          SELECT SK_TIEMPO INTO V_LOOP_SK_TIEMPO_FINAL FROM GTT_FECHAS WHERE CONTEO \u003d V_PK + 1;\n  \n          EXECUTE IMMEDIATE \u0027TRUNCATE TABLE GTT_FACT_PRESTAMOS_INICIAL\u0027;\n          EXECUTE IMMEDIATE \u0027TRUNCATE TABLE GTT_RESUMEN\u0027;\n          EXECUTE IMMEDIATE \u0027TRUNCATE TABLE GTT_TABLA_FINAL\u0027;\n          EXECUTE IMMEDIATE \u0027TRUNCATE TABLE GTT_CAPITAL_PREPAGADO\u0027;\n  \n          -- 4. OBTENER ESTADO INICIAL DE PR√âSTAMOS\n          -- -----------------------------------------------------------------------------------------\n          INSERT INTO GTT_FACT_PRESTAMOS_INICIAL (NUM_OPERACION, SALDO_CAPITAL, CLASE_CARTERA)\n          SELECT\n              T2.COD_OPERACION AS NUM_OPERACION,\n              T1.IMP_SALDO_CAPITAL,\n              T2.DES_CLASE_CARTERA\n          FROM I_BMIA.DWH_HEC_PRESTAMOS_MTH T1\n          JOIN I_BMIA.DWH_DIM_PRESTAMOS T2 ON T1.ID_PRESTAMOS \u003d T2.ID\n          JOIN I_BMIA.DWH_DIM_ESTADOS_PRESTAMOS T3 ON T1.ID_ESTADO \u003d T3.ID\n          LEFT JOIN I_BMIA.DWH_DIM_PRODUCTO T4 ON T1.ID_PRODUCTO \u003d T4.ID\n          WHERE T1.ID_TIME_CORTE \u003d V_LOOP_SK_TIEMPO_INICIAL\n            AND T3.COD_ESTADO \u003c\u003e \u002799\u0027\n            AND T1.IMP_SALDO_CAPITAL \u003e 0\n            AND T4.COD_MODULO \u003c\u003e 33;\n          COMMIT;\n  \n          -- 5. OBTENER RESUMEN DE OPERACIONES CANCELADAS/RENOVADAS\n          -- -----------------------------------------------------------------------------------------\n          INSERT INTO GTT_RESUMEN (NUM_OPERACION, FECHA_ULTIMO_PAGO, NUEVA_OPERACION, FECHA_VENCIMIENTO, CARACTERISTICA)\n          SELECT\n              T2.COD_OPERACION AS NUM_OPERACION,\n              T1.FEC_ULTIMO_PAGO_CLIENTE,\n              T2.COD_OPERACION AS NUEVA_OPERACION,\n              T1.FEC_VENCIMIENTO,\n              /*--------------------------------------------------------------------------------------------\n              OJO: MODIFICACION AL NUM_OPERACION:\n              Verificar que el resultado sea el esperado tabla LKP_OPERACION_REF no esta mapeada en NEXO\n              se sustituye el camp√≥ NUM_OPERACION usando el COD_OPERACION de la tabla DWH_DIM_PRESTAMOS\n              ----------------------------------------------------------------------------------------------*/\n              CASE\n                  WHEN T2.COD_OPERACION LIKE \u0027%-33-%\u0027 THEN \u0027CASTIGO\u0027\n                  WHEN T2.COD_OPERACION LIKE \u0027%-1-%\u0027 THEN \u0027RECONOCIMIENTO\u0027\n                  WHEN T2.COD_OPERACION LIKE \u0027%-0-%\u0027 AND (TRUNC(T1.FEC_VENCIMIENTO) - TRUNC(T1.FEC_ULTIMO_PAGO_CLIENTE)) \u003e 60 THEN \u0027PREPAGO RENOVACION\u0027\n                  WHEN T2.COD_OPERACION LIKE \u0027%-0-%\u0027 THEN \u0027RENOVACION\u0027\n                  WHEN (TRUNC(T1.FEC_VENCIMIENTO) - TRUNC(T1.FEC_ULTIMO_PAGO_CLIENTE)) \u003e 60 THEN \u0027PREPAGO CANCELACION\u0027\n                  ELSE \u0027CANCELACION EN TIEMPO\u0027\n              END AS CARACTERISTICA\n          FROM I_BMIA.DWH_HEC_PRESTAMOS_MTH T1\n          JOIN I_BMIA.DWH_DIM_PRESTAMOS T2 ON T1.ID_PRESTAMOS \u003d T2.ID\n          JOIN I_BMIA.DWH_DIM_ESTADOS_PRESTAMOS T3 ON T1.ID_ESTADO \u003d T3.ID\n          LEFT JOIN I_BMIA.DWH_DIM_PRODUCTO T4 ON T1.ID_PRODUCTO \u003d T4.ID\n          --LEFT JOIN I_BMIA.LKP_OPERACION_REF B ON T2.NUM_OPERACION \u003d B.NUM_OPERACION_REF -- Campo no monologado en NEXO\n          WHERE T1.ID_TIME_CORTE \u003d V_LOOP_SK_TIEMPO_FINAL\n            AND T3.COD_ESTADO \u003d \u002799\u0027\n            AND T4.COD_MODULO \u003c\u003e 33;\n          COMMIT;\n  \n          -- 6. CONSOLIDAR RESULTADOS DE CANCELACIONES\n          -- -----------------------------------------------------------------------------------------\n          INSERT INTO GTT_TABLA_FINAL (CARACTERISTICA, CLASE_CARTERA, SALDO_CAPITAL, TOTAL)\n          SELECT\n              B.CARACTERISTICA,\n              A.CLASE_CARTERA,\n              ROUND(SUM(A.SALDO_CAPITAL), 0),\n              COUNT(*)\n          FROM GTT_FACT_PRESTAMOS_INICIAL A\n          JOIN GTT_RESUMEN B ON A.NUM_OPERACION \u003d B.NUM_OPERACION\n          GROUP BY B.CARACTERISTICA, A.CLASE_CARTERA;\n  \n          -- 7. CALCULAR CAPITAL PREPAGADO PARCIALMENTE\n          -- -----------------------------------------------------------------------------------------\n          INSERT INTO GTT_CAPITAL_PREPAGADO (NUM_OPERACION, MONTO_CAPITAL_PAGADO)\n          SELECT\n              T2.COD_OPERACION AS NUM_OPERACION,\n              SUM(T1.IMP_CAPITAL_PAGADO) AS MONTO_CAPITAL_PAGADO\n          FROM I_BMIA.DWH_HEC_PAGOS_PRESTAMOS T1\n          JOIN I_BMIA.DWH_DIM_PAGOS_PRESTAMOS T2 ON T1.ID_PAGOS_PRESTAMOS \u003d T2.ID\n          WHERE T1.ID_TIME_CORTE \u003e V_LOOP_SK_TIEMPO_INICIAL\n            AND T1.ID_TIME_CORTE \u003c\u003d V_LOOP_SK_TIEMPO_FINAL\n            AND (TRUNC(T1.FEC_VENCIMIENTO) - TRUNC(T1.FEC_PAGO_CLIENTE)) \u003e 60\n            AND T1.IMP_CAPITAL_PAGADO \u003e 0\n          GROUP BY T2.COD_OPERACION;\n  \n          -- 8. INSERTAR RESULTADOS ADICIONALES EN LA TABLA FINAL\n          -- -----------------------------------------------------------------------------------------\n          INSERT INTO GTT_TABLA_FINAL (CARACTERISTICA, CLASE_CARTERA, SALDO_CAPITAL, TOTAL)\n          SELECT\n              \u0027PREPAGADO PARCIAL\u0027 AS  CARACTERISTICA,\n              B.CLASE_CARTERA AS CLASE_CARTERA,\n              ROUND(SUM(B.SALDO_CAPITAL), 0),\n              COUNT(*)\n          FROM GTT_CAPITAL_PREPAGADO A\n          JOIN GTT_FACT_PRESTAMOS_INICIAL B ON A.NUM_OPERACION \u003d B.NUM_OPERACION\n          WHERE A.NUM_OPERACION NOT IN (SELECT NUM_OPERACION FROM GTT_RESUMEN)\n          GROUP BY B.CLASE_CARTERA;\n  \n          INSERT INTO GTT_TABLA_FINAL (CARACTERISTICA, CLASE_CARTERA, SALDO_CAPITAL, TOTAL)\n          SELECT\n              \u0027SALDO INICIAL\u0027 AS CARACTERISTICA,\n              B.CLASE_CARTERA,\n              ROUND(SUM(B.SALDO_CAPITAL), 0),\n              COUNT(*)\n          FROM GTT_FACT_PRESTAMOS_INICIAL B\n          GROUP BY B.CLASE_CARTERA;\n  \n          -- 9. ACUMULAR RESULTADOS DEL PER√çODO EN LA TABLA DE RESUMEN FINAL\n          -- -----------------------------------------------------------------------------------------\n          INSERT INTO GTT_RESUMEN_PREPAGOS (SK_TIEMPO, CARACTERISTICA, CLASE_CARTERA, SALDO_CAPITAL, CREDITOS)\n          SELECT V_LOOP_SK_TIEMPO_FINAL, CARACTERISTICA, CLASE_CARTERA, SALDO_CAPITAL, TOTAL\n          FROM GTT_TABLA_FINAL;\n  \n          V_PK :\u003d V_PK + 1;\n  \n      END LOOP;\n  \n  EXCEPTION\n      WHEN OTHERS THEN\n          DBMS_OUTPUT.PUT_LINE(\u0027Error durante la ejecuci√≥n: \u0027 || SQLERRM);\n  END;\n  /\n  \n  -- 10. CONSULTA FINAL DE RESULTADOS\n  -- -----------------------------------------------------------------------------------------\n  SELECT * FROM GTT_RESUMEN_PREPAGOS;\n\n  ## üì¶ 1. Consulta PAGOS Y CLASE CARTERA\n\n  \n\n  `\n}\n"},{"id":"2f7c5fbb-14a0-4f67-8c8a-e2e35e1d7205","name":"ToolsManager","type":"server_js","source":"/**\n * @class ToolExecutor\n * @description Registra y ejecuta las funciones de herramientas disponibles que el modelo puede llamar.\n */\nclass ToolExecutor {\n  /**\n   * @private\n   * @type {Object.\u003cstring, Function\u003e} availableTools - Mapea nombres de funciones a sus implementaciones JavaScript reales.\n   */\n\n  constructor() {\n    this.availableTools \u003d {};\n    Logger.log(\"ToolExecutor inicializado.\");\n  }\n\n  /**\n   * Registra una funci√≥n para que pueda ser llamada por el modelo.\n   * @param {string} functionName - El nombre de la funci√≥n tal como se define en el esquema de la API (ej. \"getFilteredData\").\n   * @param {Function} implementation - La funci√≥n JavaScript real que implementa la l√≥gica.\n   */\n  registerTool(functionName, implementation) {\n    if (typeof implementation !\u003d\u003d \u0027function\u0027) {\n      throw new Error(`La implementaci√≥n para la herramienta \u0027${functionName}\u0027 debe ser una funci√≥n.`);\n    }\n    this.availableTools[functionName] \u003d implementation;\n    Logger.log(`Herramienta registrada en ToolExecutor: ${functionName}`);\n  }\n\n  /**\n   * @typedef {Object} GeminiFunctionCall\n   * @property {string} name - El nombre de la funci√≥n a llamar (ej. \"getFilteredData\").\n   * @property {Object} args - Los argumentos de la funci√≥n como un objeto JavaScript.\n   */\n\n  /**\n   * Ejecuta una llamada a una herramienta basada en la sugerencia del modelo de Gemini.\n   * @param {GeminiFunctionCall} geminiFunctionCall - Un objeto GeminiFunctionCall recibido de la respuesta del modelo.\n   * @returns {*} El resultado de la ejecuci√≥n de la funci√≥n de la herramienta.\n   * @throws {Error} Si la herramienta no est√° registrada o la ejecuci√≥n falla.\n   */\n  executeToolCall(geminiFunctionCall) { // \u003c--- ¬°Cambiamos el nombre del par√°metro para mayor claridad!\n    // Validar que el objeto recibido tiene el formato esperado de Gemini\n    if (!geminiFunctionCall || typeof geminiFunctionCall.name \u003d\u003d\u003d \u0027undefined\u0027 || typeof geminiFunctionCall.args \u003d\u003d\u003d \u0027undefined\u0027) {\n        throw new Error(\"ToolExecutor: Objeto de llamada a funci√≥n de Gemini inv√°lido. Esperaba { name: string, args: object }.\");\n    }\n\n    const functionName \u003d geminiFunctionCall.name; // \u003c-- ¬°ACCESO DIRECTO!\n    const functionArgs \u003d geminiFunctionCall.args; // \u003c-- ¬°ACCESO DIRECTO! (ya es un objeto, no necesita parseo)\n\n    Logger.log(`Intentando ejecutar herramienta: ${functionName} con argumentos: ${JSON.stringify(functionArgs)}`);\n\n    const toolToExecute \u003d this.availableTools[functionName];\n\n    if (!toolToExecute) {\n      throw new Error(`Herramienta no encontrada en ToolExecutor: ${functionName}. Aseg√∫rate de registrarla con el nombre correcto.`);\n    }\n\n    try {\n      // Llamar a la funci√≥n con los argumentos.\n      // `functionArgs` ya es un objeto, lo pasamos directamente.\n      const result \u003d toolToExecute(functionArgs); \n      Logger.log(`Resultado de la herramienta ${functionName}: ${JSON.stringify(result)}`);\n      return result;\n    } catch (e) {\n      Logger.log(`Error al ejecutar la herramienta ${functionName}: ${e.message}`);\n      throw new Error(`Error al ejecutar la herramienta ${functionName}: ${e.message}`);\n    }\n  }\n}\n"},{"id":"8ab41c53-558e-4426-b47a-bacdbfa42c93","name":"ToolsContext","type":"server_js","source":"/**\n * Diccionario con la definici√≥n de las funciones a llamar en el modelo Gemini.\n * El formato de tools para Gemini es un array de objetos Tool,\n * donde cada Tool contiene un array \u0027functionDeclarations\u0027.\n */\nfunction toolFunctions() {\n    const myTools \u003d [\n        {\n            \"functionDeclarations\": [\n                {\n                    \"name\": \"getFilteredData\",\n                    \"description\": \"Herramienta CR√çTICA: Obtiene datos filtrados desde una hoja de c√°lculo de Google Sheets. Filtra por m√∫ltiples criterios. IMPORTANTE: los campos deben pasarse en MAY√öSCULAS.\",\n                    \"parameters\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"params\": {\n                                \"type\": \"object\",\n                                \"description\": \"Objeto que contiene los filtros de b√∫squeda aplicados a las columnas del diccionario.\",\n                                \"properties\": {\n                                    \"CAMPO_MISS\": {\n                                        \"type\": \"array\",\n                                        \"items\": { \"type\": \"string\" },\n                                        \"description\": \"Lista de nombres de campos SQL (columnas) a buscar en la hoja \u0027Diccionario\u0027. Ejemplo: [\u0027SK_CLIENTE\u0027, \u0027SALDO_CAPITAL\u0027]\"\n                                    },\n                                    \"TABLA_MISS\": {\n                                        \"type\": \"array\",\n                                        \"items\": { \"type\": \"string\" },\n                                        \"description\": \"Lista de nombres de tablas SQL a buscar en la hoja \u0027Diccionario\u0027. Ejemplo: [\u0027FACT_PRESTAMOS_MES\u0027]\"\n                                    }\n                                },\n                                // *** CAMBIO CLAVE AQU√ç: Solo TABLA_MISS es requerido ***\n                                \"required\": [\"TABLA_MISS\"]\n                            }\n                        },\n                        \"required\": [\"params\"]\n                    }\n                }\n            ]\n        }\n    ];\n    return myTools;\n}\n"},{"id":"b6e28395-59d1-4fd5-9fac-c2b51e8f232a","name":"miToolConfig","type":"server_js","source":"const miToolConfig \u003d {\n  /**\n   * Configuraci√≥n principal para el uso de herramientas.\n   * Por ahora, solo contiene \u0027functionCallingConfig\u0027.\n   */\n  functionCallingConfig: {\n    /**\n     * El modo de ejecuci√≥n de la llamada a funciones.\n     * Acepta tres valores: \u0027AUTO\u0027, \u0027ANY\u0027, \u0027NONE\u0027.\n     */\n    mode: \"ANY\",\n\n    /**\n     * (Opcional) Una lista de nombres de funciones permitidas.\n     * Si se especifica, el modelo SOLO podr√° elegir entre estas funciones.\n     */\n    allowedFunctionNames: [\"getFilteredData\"] \n  }\n};"},{"id":"c6c0cf89-c799-47b7-8c35-24e7fb6d983b","name":"GeminiAPI","type":"server_js","source":"/**\n * @class GeminiChatAPI\n * @description Clase para gestionar el contexto de la conversaci√≥n, definir herramientas y realizar llamadas a la API de Gemini,\n * con persistencia del historial de mensajes y herramientas utilizando Google Apps Script\u0027s PropertiesService.\n */\nclass GeminiChatAPI {\n\n    /**\n     * Constructor de la clase GeminiChatAPI.\n     * @param {string} modelName - El nombre del modelo de Gemini a utilizar (ej. \"gemini-1.5-flash\", \"gemini-1.5-pro\").\n     * @param {string} apiKey - Tu clave API de Gemini.\n     * @param {string} [initialSystemMessage] - Un mensaje inicial de \"system\" (como \"parts\" en Gemini) para establecer el comportamiento del asistente.\n     * @param {string} [apiEndpoint\u003d\"https://generativelanguage.googleapis.com/v1beta/models/\"] - La URL base del endpoint de la API. El modelo se a√±adir√° a esto.\n     * @param {GoogleAppsScript.Properties.Properties} [propertiesServiceInstance] - Instancia opcional de PropertiesService. Por defecto, usa UserProperties.\n     */\n    constructor(\n      modelName, \n      apiKey, \n      initialSystemMessage \u003d null, \n      apiEndpoint \u003d \"https://generativelanguage.googleapis.com/v1beta/models/\", \n      propertiesServiceInstance \u003d null\n    ) {\n        if (!modelName) {\n            throw new Error(\"El nombre del modelo de Gemini es requerido.\");\n        }\n        if (!apiKey) {\n            throw new Error(\"La clave API de Gemini es requerida.\");\n        }\n\n        this.model \u003d modelName;\n        this.apiKey \u003d apiKey;\n        // El apiEndpoint ahora es la base, el modelo y la acci√≥n se a√±adir√°n despu√©s\n        this.apiEndpoint \u003d apiEndpoint; \n        this.propertiesService \u003d propertiesServiceInstance || PropertiesService.getUserProperties();\n        // Cambiamos la clave para reflejar que es para Gemini\n        this._CONTEXT_PROPERTY_KEY \u003d \u0027GEMINI_CHAT_CONTEXT\u0027;\n\n        this.messages \u003d [];\n        this.tools \u003d [];\n\n        // Cargar el estado del contexto persistido\n        this._loadContext();\n\n        // Gemini no tiene un rol \"system\" expl√≠cito en `contents` como Mistral.\n        // Los mensajes de sistema se manejan mejor como el primer mensaje del rol \"user\" o\n        // como parte de la configuraci√≥n `generationConfig` o `safetySettings`\n        // o, si es un mensaje de comportamiento, como parte del primer mensaje \"user\" en el prompt.\n        // Para mantener la modularidad, lo a√±adiremos como el primer mensaje del rol \"user\" si el historial est√° vac√≠o.\n        // Podr√≠as considerar pasarlo como un ajuste en `generationConfig` si Gemini lo soportara as√≠ para System.\n        if (this.messages.length \u003d\u003d\u003d 0 \u0026\u0026 initialSystemMessage) {\n            // Ajustamos a la estructura de Gemini: un mensaje con rol \u0027user\u0027\n            // y el mensaje del sistema como su \u0027text\u0027\n            this.addMessage(\"user\", initialSystemMessage);\n            this._saveContext(); \n        }\n\n        Logger.log(`GeminiChatAPI inicializada para el modelo: ${this.model}`);\n    }\n\n    /**\n     * Carga el historial de mensajes y herramientas desde PropertiesService.\n     * @private\n     */\n    _loadContext() {\n        try {\n            const storedContext \u003d this.propertiesService.getProperty(this._CONTEXT_PROPERTY_KEY);\n            if (storedContext) {\n                const parsedContext \u003d JSON.parse(storedContext);\n                this.messages \u003d parsedContext.messages || [];\n                this.tools \u003d parsedContext.tools || [];\n                Logger.log(\"Contexto cargado desde PropertiesService.\");\n            } else {\n                this.messages \u003d [];\n                this.tools \u003d [];\n                Logger.log(\"No se encontr√≥ contexto persistido. Iniciando con contexto vac√≠o.\");\n            }\n        } catch (e) {\n            Logger.log(`Error al cargar contexto: ${e.message}. Iniciando con contexto vac√≠o.`);\n            this.messages \u003d [];\n            this.tools \u003d [];\n        }\n    }\n\n    /**\n     * Guarda el historial de mensajes y herramientas en PropertiesService.\n     * @private\n     */\n    _saveContext() {\n        try {\n            const contextToStore \u003d {\n                messages: this.messages,\n                tools: this.tools \n            };\n            const stringifiedContext \u003d JSON.stringify(contextToStore);\n            this.propertiesService.setProperty(this._CONTEXT_PROPERTY_KEY, stringifiedContext);\n            Logger.log(\"Contexto guardado en PropertiesService.\");\n        } catch (e) {\n            Logger.log(`Error al guardar contexto: ${e.message}. Contexto no persistido.`);\n        }\n    }\n\n    /**\n     * A√±ade un mensaje al historial de conversaci√≥n y lo guarda.\n     * @param {string} role - El rol del emisor (\u0027user\u0027 o \u0027model\u0027).\n     * @param {string|Object} content - El contenido del mensaje (texto o un objeto de llamada a herramienta/respuesta).\n     */\n    addMessage(role, content) {\n        // Transformar el contenido al formato de \u0027parts\u0027 de Gemini\n        let parts \u003d [];\n\n        if (role \u003d\u003d\u003d \u0027user\u0027) {\n            // Esta parte se mantiene igual para los mensajes de texto del usuario.\n            if (typeof content \u003d\u003d\u003d \u0027string\u0027) {\n                parts.push({ text: content });\n            } else {\n                Logger.warning(`Contenido de usuario inesperado: ${JSON.stringify(content)}`);\n                parts.push({ text: JSON.stringify(content) }); // fallback\n            }\n\n        } else if (role \u003d\u003d\u003d \u0027model\u0027) {\n            // Esta parte se mantiene igual para las respuestas y sugerencias del modelo.\n            if (typeof content \u003d\u003d\u003d \u0027string\u0027) {\n                parts.push({ text: content });\n            } else if (content.tool_calls \u0026\u0026 Array.isArray(content.tool_calls)) {\n                content.tool_calls.forEach(call \u003d\u003e {\n                    parts.push({\n                        functionCall: {\n                            name: call.function.name,\n                            args: call.function.arguments\n                        }\n                    });\n                });\n            } else {\n                Logger.warning(`Contenido de modelo inesperado: ${JSON.stringify(content)}`);\n                parts.push({ text: JSON.stringify(content) }); // fallback\n            }\n\n        /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d INICIO DEL CAMBIO \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */\n        \n        } else if (role \u003d\u003d\u003d \u0027tool\u0027) {\n            // ‚ú® NUEVO BLOQUE: Aqu√≠ manejamos espec√≠ficamente la respuesta de la herramienta.\n            // \u0027content\u0027 que llega aqu√≠ es el objeto que creamos en la funci√≥n principal:\n            // { functionResponse: { name: \u0027getFilteredData\u0027, response: \u0027...\u0027 } }\n\n            if (content.functionResponse \u0026\u0026 content.functionResponse.name) {\n                parts.push({\n                    functionResponse: {\n                        name: content.functionResponse.name,\n                        // La API espera que la respuesta sea un objeto, por lo que la anidamos.\n                        // Tu `contentForGemini` ya contiene el texto formateado.\n                        response: {\n                          content: content.functionResponse.response\n                        }\n                    }\n                });\n            } else {\n                // Fallback si el contenido de la herramienta no tiene el formato esperado.\n                Logger.warning(`Contenido de herramienta con formato incorrecto: ${JSON.stringify(content)}`);\n            }\n\n        /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FIN DEL CAMBIO \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */\n\n        } else {\n            // Este bloque ahora solo se activar√° si llega un rol verdaderamente inesperado.\n            Logger.warning(`Rol desconocido: \"${role}\". Usando \"user\" por defecto para Gemini.`);\n            role \u003d \u0027user\u0027;\n            parts.push({ text: typeof content \u003d\u003d\u003d \u0027string\u0027 ? content : JSON.stringify(content) });\n        }\n\n        this.messages.push({ role: role, parts: parts });\n        this._saveContext();\n    }\n\n    /**\n     * Establece un nuevo array de mensajes, sobrescribiendo el historial existente y persistiendo.\n     * @param {Array\u003cObject\u003e} newMessages - Un array de objetos de mensaje en formato de Gemini (con `role` y `parts`).\n     */\n    setMessages(newMessages) {\n        if (!Array.isArray(newMessages)) {\n            throw new Error(\"El contexto debe ser un array de mensajes.\");\n        }\n        // Validaci√≥n b√°sica de la estructura de mensajes para Gemini\n        newMessages.forEach(msg \u003d\u003e {\n            if (!msg.role || !msg.parts || !Array.isArray(msg.parts)) {\n                throw new Error(\"Cada mensaje debe tener un \u0027role\u0027 y un array \u0027parts\u0027.\");\n            }\n        });\n        this.messages \u003d newMessages;\n        this._saveContext();\n        Logger.log(\"Historial de mensajes sobrescrito y guardado.\");\n    }\n\n    /**\n     * Obtiene el historial actual de mensajes.\n     * @returns {Array\u003cObject\u003e} Una copia del array de mensajes.\n     */\n    getMessages() {\n        return [...this.messages];\n    }\n\n    /**\n     * Limpia el historial de mensajes y lo elimina de PropertiesService.\n     */\n    clearMessages() {\n        this.messages \u003d [];\n        this.propertiesService.deleteProperty(this._CONTEXT_PROPERTY_KEY);\n        Logger.log(\"Historial de mensajes limpiado y eliminado de PropertiesService.\");\n    }\n\n    /**\n     * Establece las herramientas disponibles para el modelo y las persiste.\n     * @param {Array\u003cObject\u003e} newTools - Un array de objetos de herramientas en el formato de Gemini.\n     * Ej: `[{ functionDeclaration: { name: \u0027myFunction\u0027, parameters: { ... } } }]`\n     */\n    setTools(newTools) {\n        if (!Array.isArray(newTools)) {\n            throw new Error(\"Las herramientas deben ser un array.\");\n        }\n        // Opcional: Podr√≠as a√±adir validaci√≥n para la estructura de las herramientas de Gemini aqu√≠.\n        this.tools \u003d newTools;\n        this._saveContext();\n        Logger.log(\"Herramientas establecidas y guardadas.\");\n    }\n\n    /**\n     * Agrega una sola herramienta a la lista existente y las persiste.\n     * @param {Object} toolObject - El objeto de la herramienta a agregar en formato de Gemini.\n     * Ej: `{ functionDeclaration: { name: \u0027myFunction\u0027, parameters: { ... } } }`\n     */\n    addTool(toolObject) {\n        // Validaci√≥n b√°sica para el formato de herramienta de Gemini\n        if (typeof toolObject !\u003d\u003d \u0027object\u0027 || toolObject \u003d\u003d\u003d null || !toolObject.functionDeclaration || !toolObject.functionDeclaration.name) {\n            throw new Error(\"El objeto de la herramienta debe ser un objeto v√°lido con \u0027functionDeclaration\u0027 y \u0027functionDeclaration.name\u0027.\");\n        }\n        this.tools.push(toolObject);\n        this._saveContext();\n        Logger.log(`Herramienta \u0027${toolObject.functionDeclaration.name}\u0027 a√±adida y guardada.`);\n    }\n\n    /**\n     * Limpia la lista de herramientas y las elimina de PropertiesService (indirectamente, al guardar sin ellas).\n     */\n    clearTools() {\n        this.tools \u003d [];\n        this._saveContext(); \n        Logger.log(\"Herramientas limpiadas y el cambio guardado.\");\n    }\n\n    /**\n     * Genera el payload completo en formato JSON para enviar a la API de Gemini.\n     * @param {Object} [options\u003d{}] - Opciones adicionales para el payload (ej. `generationConfig`, `safetySettings`).\n     * @returns {string} El payload JSON como una cadena de texto.\n     */\n\n    _buildPayload(options \u003d {}) {\n        // Inicializa el payload con los contenidos del chat\n        const payload \u003d {\n            contents: this.messages\n        };\n\n        // A√±adir generationConfig si existe en las opciones pasadas\n        if (options.generationConfig) {\n            payload.generationConfig \u003d options.generationConfig;\n        } else {\n            // Aseguramos un valor por defecto si no se pasa uno, para evitar errores de API\n            payload.generationConfig \u003d { temperature: 0.1 }; \n        }\n\n        // A√±adir safetySettings si existe en las opciones pasadas\n        if (options.safetySettings) {\n            payload.safetySettings \u003d options.safetySettings;\n        }\n\n        // --- ¬°¬°¬°ESTA ES LA PARTE CR√çTICA PARA LAS HERRAMIENTAS!!! ---\n        // A√±adir la DECLARACI√ìN de las herramientas al payload.\n        // Asumimos que `this.tools` ya es el objeto { \"functionDeclarations\": [...] }\n        // si lo guardaste as√≠ en setTools, o la estructura que la API espera.\n        // Si tu `setTools` guard√≥ un array de herramientas, por ejemplo:\n        // `setTools(newTools)` donde `newTools` es `[{ functionDeclarations: [...] }]`\n        // entonces deber√≠as accederlo como `this.tools[0]`.\n        \n        // **Ajusta esta l√≥gica seg√∫n la estructura EXACTA de `this.tools`**\n        if (this.tools \u0026\u0026 this.tools.functionDeclarations \u0026\u0026 Array.isArray(this.tools.functionDeclarations) \u0026\u0026 this.tools.functionDeclarations.length \u003e 0) {\n            payload.tools \u003d this.tools; // Si this.tools ya es { \"functionDeclarations\": [...] }\n            Logger.log(\"DEBUG: Herramientas a√±adidas al payload.\");\n        } else if (this.tools \u0026\u0026 Array.isArray(this.tools) \u0026\u0026 this.tools.length \u003e 0 \u0026\u0026 this.tools[0].functionDeclarations) {\n            // Esto cubre el caso si `this.tools` es un array como `[{ functionDeclarations: [...] }]`\n            payload.tools \u003d this.tools[0];\n            Logger.log(\"DEBUG: Herramientas a√±adidas al payload (formato array).\");\n        }\n        else {\n            Logger.log(\"ADVERTENCIA CR√çTICA: Las definiciones de herramientas (payload.tools) no se pudieron a√±adir correctamente. Formato de this.tools: \" + JSON.stringify(this.tools));\n        }\n        // --- FIN DE LA PARTE CR√çTICA PARA LAS HERRAMIENTAS ---\n\n\n        // --- ¬°¬°¬°ESTA ES LA PARTE CR√çTICA PARA FORZAR LAS LLAMADAS A HERRAMIENTAS!!! ---\n        // A√±adir la CONFIGURACI√ìN DE HERRAMIENTAS (toolConfig) al payload.\n        // Esto es lo que fuerza al modelo a generar functionCalls.\n        if (options.toolConfig) {\n            payload.toolConfig \u003d options.toolConfig;\n            Logger.log(\"DEBUG: toolConfig a√±adido al payload.\");\n        } else {\n\n            Logger.log(\"ADVERTENCIA CR√çTICA: toolConfig no est√° presente en las opciones para el payload. No se forzar√° el uso de herramientas.\");\n        }\n        // --- FIN DE LA PARTE CR√çTICA PARA FORZAR LAS LLAMADAS A HERRAMIENTAS ---\n        \n        return JSON.stringify(payload);\n    }\n\n  /**\n   * Env√≠a la solicitud de chat a la API de Gemini y devuelve la respuesta.\n   * Incluye los mensajes y herramientas actuales de la instancia.\n   * @param {Object} [apiOptions\u003d{}] - Opciones adicionales para el payload de la API (ej. `temperature`, `safetySettings`).\n   * \u0027temperature\u0027 se anidar√° en \u0027generationConfig\u0027.\n   * @returns {Object|null} El objeto de respuesta JSON de la API de Gemini, o null si hay un error.\n   */\n  sendMessage(apiOptions \u003d {}) {\n      const fullApiUrl \u003d `${this.apiEndpoint}${this.model}:generateContent?key\u003d${this.apiKey}`;\n\n      // Creamos un objeto para contener TODAS las opciones que ir√°n al payload.\n      // Esto asegura que generationConfig y safetySettings est√©n en el lugar correcto.\n      const payloadOptions \u003d {};\n\n      // 1. Manejar generationConfig (incluyendo temperature)\n      if (apiOptions.temperature !\u003d\u003d undefined) {\n          payloadOptions.generationConfig \u003d {\n              temperature: apiOptions.temperature\n          };\n      } else {\n          // Aseg√∫rate de que siempre haya un generationConfig si se pasan otras propiedades\n          // O si quieres un default temperature cuando no se especifica.\n          // Por ejemplo, si apiOptions.temperature no existe, puedes definir un default:\n          payloadOptions.generationConfig \u003d {\n              temperature: 0.1 // Default si no se pasa uno\n          };\n      }\n\n      if (apiOptions.tool_config !\u003d\u003d undefined) {\n          payloadOptions.toolConfig \u003d apiOptions.tool_config;\n      }    \n\n      // Aqu√≠ puedes a√±adir otros par√°metros de generationConfig si los necesitas,\n      // por ejemplo:\n      // if (apiOptions.maxOutputTokens !\u003d\u003d undefined) {\n      //     payloadOptions.generationConfig.maxOutputTokens \u003d apiOptions.maxOutputTokens;\n      // }\n\n\n      // 2. Manejar safetySettings si existen\n      if (apiOptions.safetySettings !\u003d\u003d undefined) {\n          payloadOptions.safetySettings \u003d apiOptions.safetySettings;\n      }\n\n      // 3. Pasar el objeto payloadOptions ya estructurado a _buildPayload\n      const requestPayload \u003d this._buildPayload(payloadOptions);\n\n      Logger.log(\"Payload enviado a la API:\\n\" + JSON.stringify(JSON.parse(requestPayload), null, 2));\n\n      try {\n          const options \u003d {\n              method: \"post\",\n              contentType: \"application/json\",\n              payload: requestPayload,\n              muteHttpExceptions: true\n          };\n\n          Logger.log(`Enviando solicitud a la API de Gemini: ${fullApiUrl}`);\n          const response \u003d UrlFetchApp.fetch(fullApiUrl, options);\n          const responseCode \u003d response.getResponseCode();\n          const responseBody \u003d response.getContentText();\n\n          if (responseCode \u003e\u003d 200 \u0026\u0026 responseCode \u003c 300) {\n              const jsonResponse \u003d JSON.parse(responseBody);\n              Logger.log(\"Respuesta de la API recibida.\");\n              return jsonResponse;\n          } else {\n              Logger.log(`Error de la API: C√≥digo ${responseCode}, Mensaje: ${responseBody}`);\n              return null;\n          }\n      } catch (e) {\n          Logger.log(\"Excepci√≥n al llamar a la API: \" + e.toString());\n          return null;\n      }\n  }\n}\n"},{"id":"a662f454-cd0a-47da-9986-415e15879b7b","name":"LoadAPP","type":"server_js","source":"/**\n * Funci√≥n principal para interactuar con la API de Gemini, utilizando un flujo de herramientas.\n * Orquesta la comunicaci√≥n con el modelo, la ejecuci√≥n de herramientas y el manejo del contexto.\n *\n * @param {string} promptTexto - El mensaje del usuario para el modelo.\n * @returns {string} La respuesta final del asistente o un mensaje de error.\n */\n\n/**\n * INSERTAR LAS HERRAMIENTAS DEL SISTEMA AQUI\n * Se inserta cada herramineta dentro de la clase globalToolExecutor con el fin de disponibilizar al LLM\n */\nconst globalToolExecutor \u003d new ToolExecutor(); // Se instancia ToolExecutor para insertar herramientas\nglobalToolExecutor.registerTool(\"getFilteredData\", getFilteredData);\n\nfunction testGeminiChatAPIWithToolsFlow(promptTexto) {\n\n    // --- Configuraci√≥n Inicial ---\n    const API_KEY \u003d PropertiesService.getScriptProperties().getProperty(\u0027GEMINI_API_KEY\u0027);\n    if (!API_KEY) {\n        Logger.log(\"Error: La clave API de Gemini no est√° configurada. Aseg√∫rate de tener una propiedad \u0027GEMINI_API_KEY\u0027 en PropertiesService.\");\n        return \"Error de configuraci√≥n: Clave API de Gemini no encontrada.\";\n    }\n\n    const myToolsSchema \u003d toolFunctions(); // Obtiene las definiciones de las herramientas en formato Gemini.\n\n    // 1. Instanciar GeminiChatAPI. Carga el contexto persistente autom√°ticamente.\n    const geminiClient \u003d new GeminiChatAPI(\n        \"gemini-2.5-flash\",//\"gemini-1.5-flash\", // Modelo de Gemini. Considera \"gemini-1.5-pro\" para mayor robustez si es necesario.\n        API_KEY,\n        asistamContext() // Mensaje inicial del \"sistema\" (como primer mensaje de usuario en Gemini)\n    );\n\n    // 2. Establecer las herramientas para la sesi√≥n. Esto tambi√©n las persistir√° si cambian.\n    geminiClient.setTools(myToolsSchema);\n    // Para depuraci√≥n o reseteo: geminiClient.clearTools(); // Descomentar solo si necesitas borrar las herramientas persistidas.\n\n    // 3. A√±adir el mensaje del usuario actual al historial de la conversaci√≥n.\n    geminiClient.addMessage(\"user\", promptTexto);\n    Logger.log(\"Mensaje de usuario a√±adido al historial.\");\n\n    // --- Primera Llamada a la API de Gemini ---\n    Logger.log(\"\\n--- Realizando primera llamada a la API de Gemini (con prompt del usuario) ---\");\n    let apiResponse \u003d geminiClient.sendMessage({tool_config: miToolConfig, temperature: 0.1 });\n\n    // 4. Procesar la primera respuesta de Gemini.\n    if (!apiResponse || !apiResponse.candidates || apiResponse.candidates.length \u003d\u003d\u003d 0) {\n        Logger.log(\"Error: No se recibi√≥ una respuesta v√°lida de la API en la primera llamada.\");\n        return \"No se recibi√≥ una respuesta v√°lida del modelo.\";\n      }\n\n    const firstCandidate \u003d apiResponse.candidates[0];\n\n    Logger.log(\"Contenido completo del primer candidato (RAW):\");\n    Logger.log(JSON.stringify(firstCandidate, null, 2));\n\n    // Verificar y extraer los \u0027parts\u0027 de la respuesta del modelo.\n    const modelParts \u003d firstCandidate.content?.parts; // Usa optional chaining para mayor seguridad\n\n    if (!Array.isArray(modelParts) || modelParts.length \u003d\u003d\u003d 0) {\n        Logger.log(\"‚ùå Error: La respuesta del modelo no contiene un arreglo v√°lido de \u0027parts\u0027 o est√° vac√≠o.\");\n        throw new Error(\"Formato inesperado en la respuesta del modelo. Se esperaba un arreglo no vac√≠o en \u0027content.parts\u0027.\");\n    }\n\n    Logger.log(\"‚úÖ Parts recibidos correctamente de la primera respuesta del modelo:\");\n    Logger.log(JSON.stringify(modelParts, null, 2));\n\n    // Determinar si la respuesta del modelo es una llamada a funci√≥n o texto.\n    const functionCallsFromModel \u003d modelParts.filter(part \u003d\u003e part.functionCall);\n    const textResponseFromModel \u003d modelParts.filter(part \u003d\u003e part.text).map(p \u003d\u003e p.text).join(\u0027\u0027);\n\n    if (functionCallsFromModel.length \u003e 0) {\n        Logger.log(\"üõ†Ô∏è El modelo ha sugerido una o m√°s llamadas a herramientas (functionCall) REALES.\");\n\n        // PASO CLAVE 1: A√±adir el mensaje del modelo que contiene la sugerencia de la herramienta al historial.\n        const modelToolCallsForHistory \u003d functionCallsFromModel.map(fcPart \u003d\u003e ({\n            function: fcPart.functionCall // `fcPart.functionCall` ya es el objeto { name: \u0027...\u0027, args: {...} }\n        }));\n        geminiClient.addMessage(\"model\", { tool_calls: modelToolCallsForHistory }); \n        Logger.log(\"Sugerencia del modelo (tool_calls) a√±adida al contexto de Gemini.\");\n/*\n        // Llamar a la funci√≥n para obtener el contexto inicial\n        const initialContext \u003d asistamContext();\n\n        // Agregar el contexto inicial como un mensaje del sistema al historial de Gemini\n        geminiClient.addMessage(\"user\", {\n          content: initialContext\n        });\n*/\n        // 5. Ejecutar cada herramienta sugerida por el modelo y a√±adir su respuesta al historial.\n        for (const functionCallPart of functionCallsFromModel) {\n            // Accede al objeto functionCall real anidado\n            const functionCall \u003d functionCallPart.functionCall; // El objeto {name: ..., args: ...}\n\n            if (!functionCall || !functionCall.name) {\n                Logger.log(\"‚ùå Error: La llamada a funci√≥n del modelo no tiene \u0027name\u0027. Se omite.\");\n                continue; // Saltar a la siguiente llamada si est√° malformada.\n            }\n\n          try {\n              Logger.log(`‚öôÔ∏è Ejecutando herramienta: ${functionCall.name} con argumentos: ${JSON.stringify(functionCall.args)}`);\n              // Pasa el objeto functionCall correcto a executeToolCall\n              const toolOutput \u003d globalToolExecutor.executeToolCall(functionCall);\n\n              // Variable para almacenar el contenido que se a√±adir√° al historial de Gemini\n              let contentForGemini;\n\n              if (functionCall.name \u003d\u003d\u003d \"getFilteredData\") {\n                  // Ejecutar contextInfo con el resultado de getFilteredData\n                  const contextGenerated \u003d contextInfo(toolOutput);\n                  Logger.log(\"üì¶ Contexto de migraci√≥n generado (para Logger):\\n\" + contextGenerated);\n                  // Asignar el resultado de contextInfo a contentForGemini\n                  contentForGemini \u003d contextGenerated;\n              } else {\n                  Logger.log(`üßæ Resultado directo de herramienta ${functionCall.name} (para Logger):\\n` + JSON.stringify(toolOutput, null, 2));\n                  // Para otras funciones, se a√±ade el toolOutput directamente\n                  contentForGemini \u003d toolOutput;\n              }\n\n              // PASO CLAVE 2: A√±adir la respuesta de la herramienta o el contexto procesado al historial.\n              geminiClient.addMessage(\"tool\", { // Rol \u0027user\u0027 para respuestas de herramientas\n                  functionResponse: { // Propiedad esperada por Gemini para la respuesta de una funci√≥n\n                      name: functionCall.name, // El nombre de la funci√≥n que fue ejecutada\n                      response: contentForGemini // ¬°El contenido procesado por contextInfo o el toolOutput directo!\n                  }\n              });\n              Logger.log(`Respuesta de herramienta \u0027${functionCall.name}\u0027 a√±adida al contexto de Gemini.`);\n\n          } catch (e) {\n              Logger.log(`‚ùå Error al ejecutar la herramienta \u0027${functionCall.name}\u0027: ${e.message}`);\n              // A√±adir el error de la herramienta al historial para que el modelo est√© al tanto.\n              geminiClient.addMessage(\"user\", {\n                  functionResponse: {\n                      name: functionCall.name,\n                      response: { error: `Error en la herramienta ${functionCall.name}: ${e.message}` }\n                  }\n              });\n              Logger.log(`Error de herramienta \u0027${functionCall.name}\u0027 a√±adido al contexto de Gemini.`);\n          }\n        }\n\n        // IMPORTANTE: incorporacion de contexto adicional para la migracio\n        geminiClient.addMessage(\"user\",businessRule())\n        geminiClient.addMessage(\"user\",migrationExpertContext())\n        geminiClient.addMessage(\"user\",exampleMigration())\n\n        // --- Segunda Llamada a la API de Gemini (despu√©s de ejecutar herramientas) ---\n        // Aqu√≠ el historial ya contiene: prompt del usuario, sugerencia de herramienta del modelo, y la respuesta de la herramienta.\n        Logger.log(\"\\n--- Historial COMPLETO de Mensajes a Enviar a la Segunda Llamada ---\");\n        if (geminiClient \u0026\u0026 geminiClient.messages) {\n            Logger.log(JSON.stringify(geminiClient.messages, null, 2));\n        } else {\n            Logger.log(\"Advertencia: No se pudo acceder a `geminiClient.messages` para el log. Esto es inesperado.\");\n        }\n        Logger.log(\"--- Fin del Historial COMPLETO ---\");\n\n        Logger.log(\"\\n--- Realizando segunda llamada a la API de Gemini (para respuesta final) ---\");\n        apiResponse \u003d geminiClient.sendMessage({tool_config: miToolConfig, temperature: 0.2 });\n\n        // 6. Procesar la segunda respuesta de Gemini (que deber√≠a ser el texto final).\n        if (apiResponse \u0026\u0026 apiResponse.candidates \u0026\u0026 apiResponse.candidates.length \u003e 0) {\n            const finalCandidate \u003d apiResponse.candidates[0];\n            \n            // Comprobamos si la respuesta tiene texto\n            if (finalCandidate.content \u0026\u0026 Array.isArray(finalCandidate.content.parts) \u0026\u0026 \n                finalCandidate.content.parts.some(p \u003d\u003e p.text)) {\n                \n                // --- CASO DE √âXITO: EL MODELO RESPONDI√ì BIEN A LA PRIMERA ---\n                const finalAssistantContent \u003d finalCandidate.content.parts.filter(p \u003d\u003e p.text).map(part \u003d\u003e part.text).join(\u0027\u0027);\n                geminiClient.addMessage(\"model\", finalAssistantContent);\n                Logger.log(\"\\n‚úÖ Respuesta final del asistente (despu√©s de herramientas):\\n\" + finalAssistantContent);\n                return finalAssistantContent;\n\n            } else {\n                // --- ‚ú® NUEVO BLOQUE DE \"EMP√öJ√ìN\" ‚ú® ---\n                // El modelo no respondi√≥ con texto. Le damos una instrucci√≥n final y directa.\n                Logger.log(\"‚ö†Ô∏è El modelo no gener√≥ texto. Enviando un mensaje de \u0027empuj√≥n\u0027 final.\");\n                \n                const pushMessage \u003d \"La informaci√≥n necesaria ha sido recolectada. Procede ahora a generar la consulta SQL de Oracle final, siguiendo todas las instrucciones.\";\n                geminiClient.addMessage(\"user\", pushMessage);\n\n                // Realizamos una TERCERA llamada a la API con este mensaje simple\n                const finalApiResponse \u003d geminiClient.sendMessage({ temperature: 0.2 });\n\n                if (finalApiResponse \u0026\u0026 finalApiResponse.candidates \u0026\u0026 finalApiResponse.candidates[0].content.parts.some(p \u003d\u003e p.text)) {\n                    const finalPushedContent \u003d finalApiResponse.candidates[0].content.parts.filter(p \u003d\u003e p.text).map(part \u003d\u003e part.text).join(\u0027\u0027);\n                    Logger.log(\"\\n‚úÖ Respuesta final del asistente (despu√©s del \u0027empuj√≥n\u0027):\\n\" + finalPushedContent);\n                    return finalPushedContent;\n                } else {\n                    // Si incluso despu√©s del empuj√≥n no responde, entonces nos rendimos.\n                    Logger.log(\"‚ùå El modelo no respondi√≥ ni siquiera despu√©s del \u0027empuj√≥n\u0027.\");\n                    return \"El modelo no pudo generar una respuesta de texto despu√©s de usar las herramientas.\";\n                }\n            }\n        } else {\n            // ... tu manejo de error para una respuesta inv√°lida se mantiene igual ...\n            Logger.log(\"No se recibi√≥ respuesta v√°lida en la segunda llamada de la API.\");\n            return \"No se recibi√≥ respuesta v√°lida despu√©s de la ejecuci√≥n de herramientas.\";\n        }\n\n    } else if (textResponseFromModel) {\n        // Si el modelo solo respondi√≥ con texto (no invoc√≥ herramientas en la primera llamada).\n        Logger.log(\"üí¨ El modelo ha respondido solo con texto (sin uso de herramientas).\");\n        geminiClient.addMessage(\"model\", textResponseFromModel); // A√±adir la respuesta de texto al historial.\n        Logger.log(\"\\n‚úÖ Respuesta del asistente (sin uso de herramientas):\\n\" + textResponseFromModel);\n        return textResponseFromModel;\n    } else {\n        // Caso inesperado: el modelo no devolvi√≥ ni texto ni llamada a funci√≥n en su primera respuesta.\n        Logger.log(\"‚ùå Error: El modelo no devolvi√≥ ni texto ni llamada a funci√≥n en su primera respuesta.\");\n        return \"El modelo no pudo generar una respuesta clara o v√°lida.\";\n    }\n}\n"},{"id":"39de1e16-d3d9-45a7-97f9-0e1fb560f6d1","name":"App","type":"server_js","source":"/**\n * Funci√≥n principal que se ejecuta cuando alguien visita la URL de tu aplicaci√≥n web.\n * @param {Object} e - El objeto de evento de la solicitud GET.\n * @returns {HtmlOutput} El contenido HTML para mostrar al usuario.\n */\nfunction doGet(e) {\n  // 1. Crea el objeto de salida HTML a partir de tu archivo \u0027Index.html\u0027\n  // 2. Modifica las opciones del iframe para permitir scripts externos como Google Analytics\n  return HtmlService.createHtmlOutputFromFile(\u0027index\u0027) // Reemplaza \u0027Index\u0027 si tu archivo HTML tiene otro nombre\n    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);\n}\n\n/**\n * Ejecuta el flujo de conversaci√≥n con la API de Gemini desde el lado del cliente (HTML).\n * @param {string} promptUsuario - El mensaje del usuario para el modelo.\n * @returns {string} La respuesta del asistente o un mensaje de error.\n */\nfunction ejecutarFlujoGeminiDesdeHTML(promptUsuario) { // \u003c-- Renombrado a Gemini\n  return testGeminiChatAPIWithToolsFlow(promptUsuario); // \u003c-- Llama a la funci√≥n de Gemini\n}\n\n//--------- LANZAMIENTO DE LA APP MANUAL PARA VERIFICACIONES -------------//\n\n/**\n * Funci√≥n para probar el flujo de conversaci√≥n con Gemini de forma manual en el editor de Apps Script.\n */\nfunction test_validacion() {\n  const promptUsuario \u003d `\n/*\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\t - CONSULTA CLIENTES DEL ACTIVO PARA ANALISIS DE TRANSACCIONALIDAD DIGITAL\n\t ------------------------------------------------------------------------------------------------------------------------------------\n\tOBJETIVO:\n\t* Construir una tabla resumen con la informacion de los clientes del activo que contenga los siguiente puntos:\n\t\t1. SK_CLIENTE (Key): Documento del cliente un solo registro por cliente\n\t\t2. CODIGOSEG (str): Segmento del clientes a fecha corte\n\t\t3. NOTA (str): Nota interna de credito a fecha corte\n\t\t4. TASA_PROMEDIO (AVG): Tasa promedio ponderada por cliente en caso de que el cliente tenga dos creditos o mas\n\t\t5. DIAS_MORA (MAX): Maximo de dias en hora por cliente a fecha corte\n\t\t6. CDAD_PRODUCTOS (SUM): Conteo de producto vigentes y activos a fecha corte\n\t\t7. SALDO_MORA (SUM): Saldo en mora de cliente a fecha corte, se suma en caso de existir dos creditos o mas \n\t\t8. SALDO_CAPITAL (SUM): Saldo capital a fecha corte, se suma en caso de existir dos creditos o mas a fin de dimencionar a un solo SK_CLIENTE.\n\tTABLAS\n\t* FACT_PRESTAMOS_MES: Historico desembolsos\n\t* LOG_SEGMENTACION: Segmentacion de cliente en cada corte\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d*/\n\t\t\t\t\t\t\t\t\t\t\t\t\t--- DECLARACION DE VARIABLES ---\n-------------------------------------------------------------------------------------------------------------------\nDECLARE\n\t\t@FECHA_DATE DATE,\n\t\t@FECHA_CORTE INT,\n\t\t@FECHA_6_MESES_ANTES INT,\n\t\t@FECHA_SEGMENTACION DATE;\n \nSET\t\t@FECHA_DATE \u003d (\t\t\n\t\t\t\t\tSELECT  CONVERT(DATE,CAST(MAX(SK_TIEMPO)AS CHAR(8)),112) AS SK_TIEMPO\n\t\t\t\t\tFROM\tDIM_TIEMPO \n\t\t\t\t\tWHERE \n\t\t\t\t\t\t\tA√ëO \u003d CASE WHEN MONTH(GETDATE()) \u003d 1 THEN YEAR(GETDATE()) -1 ELSE YEAR(GETDATE()) END AND\n\t\t\t\t\t\t\tMES \u003d CASE WHEN MONTH(GETDATE()) \u003d 1 THEN 12 ELSE MONTH(GETDATE()) -1 END AND\n\t\t\t\t\t\t\tDIA_HABIL_COMERCIAL \u003e 0 );\nSET\t\t@FECHA_CORTE \u003d CONVERT(INT,FORMAT(@FECHA_DATE,\u0027yyyyMMdd\u0027));\nSET\t\t@FECHA_6_MESES_ANTES \u003d CONVERT(INT,FORMAT(DATEADD(MONTH, -6, @FECHA_DATE),\u0027yyyyMMdd\u0027));\nSET     @FECHA_SEGMENTACION \u003d (SELECT MAX(FECHACORTE) AS FECHA_CORTE FROM CLEMENTINE.[BD_COMERCIAL].[dbo].LOG_SEGMENTACION)\n\nPRINT \u0027Fecha Corte: \u0027 + CONVERT(VARCHAR(10), @FECHA_CORTE, 120);\nPRINT \u0027Fecha 6 meses atr√°s: \u0027 + CONVERT(VARCHAR(10),@FECHA_6_MESES_ANTES, 120);\nPRINT \u0027Fecha Corte date: \u0027 + CONVERT(VARCHAR(10),@FECHA_SEGMENTACION);\n            \n/*\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \n\t\t\t\t\t\t\t\t\t        \t--- DECLARACION DE TABLAS TEMPORALES ---\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d*/\n\nBEGIN\n\tIF OBJECT_ID(\u0027tempdb..#PRESTAMOS\u0027) IS NOT NULL DROP TABLE #PRESTAMOS;  \n\tIF OBJECT_ID(\u0027tempdb..##FINAL_ACTIVO\u0027) IS NOT NULL DROP TABLE ##FINAL_ACTIVO;\nEND;\n  \n/*\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d \n\t\t\t\t\t\t\t\t\t\t                   --- DATA CREDITOS ---\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d*/\n\nSELECT\t\n\tA.SK_CLIENTE,\n\tB.CODIGOSEG,\n\tB.RELACION,\n\tB.DESARROLLO,\n\tA.NOTA,\n\tA.MONTO_DESEMBOLSADO,\n\tA.TASA ,\n\tA.NUMERO_DIAS_MORA,\n\tA.SK_PRODUCTO, \n\tA.SALDO_MORA,\n\tA.SALDO_CAPITAL,\n\tCASE WHEN A.SK_CAMPA√ëA \u003d 114 THEN 1 ELSE 0 END AS CDAD_APERTURA_DIGITAL,\n\tCASE WHEN A.SK_CAMPA√ëA \u003c\u003e 114 THEN 1 ELSE 0 END AS CDAD_APERTURA_NO_DIGITAL\nINTO #PRESTAMOS\nFROM [BMIA_DWH].[dbo].[FACT_PRESTAMOS_MES] AS A \n\tLEFT JOIN CLEMENTINE.[BD_COMERCIAL].[dbo].LOG_SEGMENTACION AS B ON A.SK_CLIENTE \u003d B.SK_CLIENTE COLLATE Modern_Spanish_CI_AS\nWHERE\t\n\tSK_TIEMPO \u003d @FECHA_CORTE\n\tAND B.FECHACORTE \u003d @FECHA_SEGMENTACION -- Tomar la clasificacion de la fecha corte\n\tAND\tSK_ESTADO_CARTERA NOT IN (99,-8888)\n\n--------------------------------------------- AGRUPACION DE TABLA -------------------------------------------\n\nSELECT \n\tSK_CLIENTE,\n\tNOTA,\n\tCODIGOSEG,\n\tRELACION,\n\tDESARROLLO,\n\tSUM(MONTO_DESEMBOLSADO) AS MONTO_DESEMBOLSADO,\n\tSUM(TASA * MONTO_DESEMBOLSADO) / SUM(MONTO_DESEMBOLSADO) AS TASA_PROMEDIO, -- Tasa Ponderada con el monto desembolso\n\tMAX(NUMERO_DIAS_MORA) AS DIAS_MORA_FECHA_CORTE,\n\tCOUNT(SK_PRODUCTO) AS CDAD_PRODUCTOS, \n\tCOUNT(DISTINCT SK_PRODUCTO) AS CDAD_PRODUCTOS_UNICOS, -- SUM Cantidad de productos unicos de las tablas #DIGITAL Y #NO_DIGITAL\n\tSUM(SALDO_MORA) AS SALDO_MORA,\n\tSUM(SALDO_CAPITAL) AS SALDO_CAPITAL,\n\tSUM(CDAD_APERTURA_DIGITAL) AS CDAD_APERTURA_DIGITAL,\n\tSUM(CDAD_APERTURA_NO_DIGITAL) AS CDAD_APERTURA_NO_DIGITAL\nINTO ##FINAL_ACTIVO \nFROM #PRESTAMOS\nGROUP BY \n\tSK_CLIENTE,\n\tCODIGOSEG,\n\tNOTA,\n\tRELACION,\n\tDESARROLLO\nORDER BY \n\tSK_CLIENTE;\n\n-- VISTA CONSULTA\nSELECT * FROM ##FINAL_ACTIVO\n\n  `;\n  \n  // Llama a la funci√≥n de flujo de Gemini.\n  const respuesta \u003d testGeminiChatAPIWithToolsFlow(promptUsuario); // \u003c-- Llama a la funci√≥n de Gemini\n  \n  Logger.log(\"Respuesta final del modelo Gemini: \" + respuesta);\n  return respuesta;\n}"},{"id":"d7b2468f-cc31-409f-b6ad-8ca3115daeee","name":"index","type":"html","source":"\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u003chead\u003e\n  \u003cbase target\u003d\"_top\"\u003e\n  \u003cmeta charset\u003d\"UTF-8\"\u003e\n  \u003cmeta name\u003d\"viewport\" content\u003d\"width\u003ddevice-width, initial-scale\u003d1.0\"\u003e\n\n  \u003clink rel\u003d\"stylesheet\" href\u003d\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github-dark.min.css\"\u003e\n  \u003cscript src\u003d\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"\u003e\u003c/script\u003e\n  \u003cscript src\u003d\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/sql.min.js\"\u003e\u003c/script\u003e\n  \u003cscript src\u003d\"https://cdnjs.cloudflare.com/ajax/libs/highlightjs-line-numbers.js/2.9.0/highlightjs-line-numbers.min.js\"\u003e\u003c/script\u003e\n\n  \u003cstyle\u003e\n    :root {\n      --primary-color: #3498db;\n      --primary-hover-color: #2980b9;\n      --danger-color: #e74c3c;\n      --danger-hover-color: #c0392b;\n      --background-light: #f4f6f8;\n      --background-white: #ffffff;\n      --text-dark: #333;\n      --border-color: #ddd;\n    }\n\n    /* \u003d\u003d\u003d ESTRUCTURA Y DISE√ëO GENERAL \u003d\u003d\u003d */\n    body {\n      font-family: \u0027Segoe UI\u0027, \u0027Roboto\u0027, Tahoma, Geneva, Verdana, sans-serif;\n      background-color: var(--background-light);\n      color: var(--text-dark);\n      padding: 0;\n      margin: 0;\n    }\n\n    .main-container {\n      padding: 15px;\n    }\n    @media (min-width: 768px) {\n      .main-container { padding: 30px; }\n    }\n\n\n    /* \u003d\u003d\u003d BANNER SUPERIOR \u003d\u003d\u003d */\n    .banner {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 20px;\n      background-color: var(--background-white);\n      border-bottom: 1px solid var(--border-color);\n      flex-wrap: wrap; /* Para mejor adaptabilidad */\n      gap: 15px;\n    }\n    .banner-left {\n      display: flex;\n      align-items: center;\n      gap: 20px;\n    }\n    .banner img {\n      height: 50px;\n    }\n    .banner h2 {\n      font-size: 1.8em;\n      margin: 0;\n      color: var(--text-dark);\n    }\n    .banner-right-logos {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n    }\n    .logo-sql {\n      height: 30px;\n    }\n\n    /* \u003d\u003d\u003d TEXTO DE BIENVENIDA (TYPEWRITER) \u003d\u003d\u003d */\n    .typewriter-container {\n      text-align: center;\n      padding: 20px;\n      background-color: #eaf5fd;\n    }\n    .typewriter span {\n      font-family: \u0027Segoe UI\u0027, \u0027Roboto\u0027, sans-serif;\n      font-size: 1.1em;\n      color: #2c3e50;\n      white-space: nowrap;\n      overflow: hidden;\n      border-right: 3px solid var(--primary-color);\n      display: inline-block;\n      animation: typing 5s steps(90, end), blink-caret .75s step-end infinite;\n    }\n\n    @keyframes typing {\n      from { width: 0 }\n      to   { width: 100% }\n    }\n    @keyframes blink-caret {\n      from, to { border-color: transparent }\n      50% { border-color: var(--primary-color); }\n    }\n\n    /* \u003d\u003d\u003d √ÅREA DE INPUT Y BOTONES \u003d\u003d\u003d */\n    textarea#entrada {\n      width: 100%;\n      height: 150px;\n      padding: 12px;\n      border-radius: 8px;\n      border: 1px solid #444;\n      font-size: 14px;\n      resize: vertical;\n      box-sizing: border-box;\n      margin-bottom: 10px;\n      font-family: \u0027Fira Code\u0027, \u0027Courier New\u0027, monospace;\n      background-color: #2d2d2d;\n      color: #f8f8f2;\n      caret-color: var(--primary-color);\n    }\n\n    .botones-contenedor {\n      display: flex;\n      gap: 10px;\n      flex-wrap: wrap;\n    }\n\n    button {\n      background-color: var(--primary-color);\n      color: white;\n      padding: 10px 20px;\n      border: none;\n      border-radius: 5px;\n      font-size: 15px;\n      cursor: pointer;\n      transition: background-color 0.3s ease;\n    }\n\n    button:hover {\n      background-color: var(--primary-hover-color);\n    }\n\n    .boton-rojo {\n      background-color: var(--danger-color);\n    }\n\n    .boton-rojo:hover {\n      background-color: var(--danger-hover-color);\n    }\n\n    /* \u003d\u003d\u003d HISTORIAL DE CONVERSACI√ìN \u003d\u003d\u003d */\n    h3 {\n      margin-top: 30px;\n      border-bottom: 2px solid var(--border-color);\n      padding-bottom: 8px;\n    }\n\n    #historial {\n      background-color: var(--background-white);\n      border: 1px solid var(--border-color);\n      border-radius: 8px;\n      padding: 20px;\n      min-height: 300px;\n      max-height: 70vh; /* Altura m√°xima para evitar que sea muy largo */\n      overflow-y: auto;\n      display: flex;\n      flex-direction: column;\n      gap: 15px; /* Espacio entre mensajes */\n    }\n\n    /* Estilos de mensajes tipo chat */\n    .mensaje-usuario, .mensaje-bot {\n      padding: 12px 18px;\n      border-radius: 18px;\n      line-height: 1.6;\n      max-width: 85%;\n      word-wrap: break-word;\n      font-family: \u0027Segoe UI\u0027, \u0027Roboto\u0027, sans-serif;\n      font-size: 15px;\n      transition: max-height 0.4s ease-in-out;\n    }\n\n    .mensaje-usuario {\n      background-color: #e1f5fe; /* Azul claro */\n      color: #01579b;\n      border-bottom-right-radius: 4px; /* Acent√∫a la direcci√≥n */\n      align-self: flex-end; /* Alinea a la derecha */\n      text-align: left;\n      position: relative;\n    }\n\n    /* Estilos para mensajes de usuario largos y contra√≠bles */\n    .mensaje-usuario.collapsible:not(.expanded) {\n        max-height: 150px; /* Altura m√°xima cuando est√° contra√≠do */\n        overflow: hidden;\n        cursor: pointer;\n    }\n    \n    .mensaje-usuario.collapsible:not(.expanded)::after {\n        content: \u0027(haz clic para ver m√°s)\u0027;\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        width: 100%;\n        height: 50px;\n        text-align: center;\n        padding-top: 25px;\n        font-weight: bold;\n        font-size: 13px;\n        color: #01579b;\n        background: linear-gradient(to bottom, transparent, #e1f5fe 80%);\n    }\n    \n    .mensaje-usuario.collapsible.expanded {\n        max-height: 2000px; /* Altura suficiente para cualquier mensaje */\n        cursor: pointer;\n    }\n\n    .mensaje-bot {\n      background-color: #f1f3f4; /* Gris claro */\n      color: var(--text-dark);\n      border-bottom-left-radius: 4px; /* Acent√∫a la direcci√≥n */\n      align-self: flex-start; /* Alinea a la izquierda */\n      text-align: left;\n    }\n\n    /* \u003d\u003d\u003d BLOQUES DE C√ìDIGO \u003d\u003d\u003d */\n    .contenedor-codigo {\n      position: relative;\n      margin: 15px 0;\n      background-color: #2d2d2d;\n      border-radius: 8px;\n      overflow: hidden;\n    }\n\n    .titulo-codigo {\n        position: absolute;\n        top: 0;\n        left: 0;\n        background-color: rgba(0, 0, 0, 0.3);\n        color: white;\n        padding: 4px 12px;\n        font-size: 12px;\n        border-bottom-right-radius: 8px;\n        text-transform: uppercase;\n        font-weight: bold;\n    }\n\n    .boton-copiar {\n        position: absolute;\n        top: 8px;\n        right: 8px;\n        background-color: #455a64;\n        color: white;\n        padding: 5px 10px;\n        font-size: 12px;\n        border-radius: 5px;\n        cursor: pointer;\n        opacity: 0.7;\n        transition: opacity 0.3s, background-color 0.3s;\n    }\n\n    .boton-copiar:hover {\n        opacity: 1;\n        background-color: var(--primary-hover-color);\n    }\n    \n    pre {\n      margin: 0;\n    }\n\n    /* Estilos para highlightjs-line-numbers */\n    .hljs-ln {\n      border: none;\n    }\n    .hljs-ln-numbers {\n        text-align: right;\n        color: #aaa;\n        border-right: 1px solid #444;\n        vertical-align: top;\n        padding-right: 10px;\n        user-select: none;\n    }\n    .hljs-ln-code {\n        padding-left: 15px;\n    }\n    pre code.hljs {\n      padding-top: 35px;\n      padding-bottom: 15px;\n    }\n\n    /* \u003d\u003d\u003d UTILIDADES (MODAL, TOAST, BOTONES SCROLL) \u003d\u003d\u003d */\n    .oculto {\n      display: none !important;\n    }\n\n    #modal-cargando {\n      position: fixed;\n      top: 0; left: 0;\n      width: 100%; height: 100%;\n      background-color: rgba(52, 73, 94, 0.5);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      z-index: 9999;\n    }\n    .modal-contenido {\n      background-color: white;\n      padding: 30px 40px;\n      border-radius: 10px;\n      text-align: center;\n      box-shadow: 0 4px 12px rgba(0,0,0,0.2);\n    }\n    .emoji-reloj {\n      font-size: 48px;\n      animation: giro 1.5s infinite linear;\n    }\n    @keyframes giro {\n      100% { transform: rotate(360deg); }\n    }\n\n    #toast-copiado {\n      position: fixed;\n      bottom: 30px;\n      left: 50%;\n      transform: translateX(-50%);\n      background-color: #323232;\n      color: white;\n      padding: 12px 20px;\n      border-radius: 8px;\n      font-size: 14px;\n      z-index: 999;\n      opacity: 0;\n      transition: opacity 0.4s, transform 0.4s;\n    }\n\n    #toast-copiado.visible {\n      opacity: 1;\n      transform: translateX(-50%) translateY(0);\n    }\n\n    .scroll-button {\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      width: 45px;\n      height: 45px;\n      font-size: 24px;\n      border-radius: 50%;\n      z-index: 1000;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n    }\n    /* \u003d\u003d\u003d MEDIA QUERIES \u003d\u003d\u003d */\n    @media (max-width: 768px) {\n      .banner {\n        flex-direction: column;\n        text-align: center;\n      }\n      .banner h2 { font-size: 1.5em; }\n      .typewriter span { font-size: 1em; }\n      textarea#entrada { height: 120px; }\n      .botones-contenedor { flex-direction: column; gap: 8px; }\n      button { width: 100%; }\n      .main-container { padding: 15px; }\n      .mensaje-usuario, .mensaje-bot { max-width: 95%; }\n    }\n\n  \u003c/style\u003e\n\u003c/head\u003e\n\n\u003c!-- Google tag (gtag.js) --\u003e\n\u003cscript async src\u003d\"https://www.googletagmanager.com/gtag/js?id\u003dG-NF5KZN7Q7K\"\u003e\u003c/script\u003e\n\u003cscript\u003e\n  window.dataLayer \u003d window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag(\u0027js\u0027, new Date());\n\n  gtag(\u0027config\u0027, \u0027G-NF5KZN7Q7K\u0027);\n\u003c/script\u003e\n\n\u003cbody\u003e\n  \u003cdiv id\u003d\"modal-cargando\" class\u003d\"modal-cargando oculto\"\u003e\n    \u003cdiv class\u003d\"modal-contenido\"\u003e\n      \u003cdiv class\u003d\"emoji-reloj\"\u003e‚è≥\u003c/div\u003e\n      \u003cp\u003eProcesando consulta...\u003c/p\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\n  \u003cdiv class\u003d\"banner\"\u003e\n    \u003cdiv class\u003d\"banner-left\"\u003e\n      \u003cimg src\u003d\"https://www.fundacionmicrofinanzasbbva.org/wp-content/uploads/2013/07/Bancamia-1.png\" alt\u003d\"Logo Bancam√≠a\"\u003e\n      \u003ch2\u003eQueryMia: Asistente de Migraci√≥n SQL\u003c/h2\u003e\n    \u003c/div\u003e\n    \u003cdiv class\u003d\"banner-right-logos\"\u003e\n      \u003cimg src\u003d\"https://ci.ucr.ac.cr/sites/default/files/2022-08/microsoft-sql-server-logo.png\" alt\u003d\"SQL Server Logo\" class\u003d\"logo-sql\"\u003e\n      \u003cimg src\u003d\"https://encrypted-tbn0.gstatic.com/images?q\u003dtbn:ANd9GcTEqdONJo2pC8NYFtqfVpXaRiUHpWuHqn5IC7qLanJnC1moDcIS6oR6aq3i2sHelsciYHI\u0026usqp\u003dCAU\" alt\u003d\"Oracle Logo\" class\u003d\"logo-sql\"\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\n  \u003cdiv class\u003d\"typewriter-container\"\u003e\n    \u003cspan id\u003d\"typewriter-text\"\u003e\u003c/span\u003e\n  \u003c/div\u003e\n\n  \u003cdiv class\u003d\"main-container\"\u003e\n    \u003ctextarea id\u003d\"entrada\" placeholder\u003d\"Escribe tu consulta SQL aqu√≠...\"\u003e\u003c/textarea\u003e\n    \u003cdiv class\u003d\"botones-contenedor\"\u003e\n      \u003cbutton onclick\u003d\"enviarPrompt()\"\u003eüì§ Enviar Consulta\u003c/button\u003e\n      \u003cbutton onclick\u003d\"borrarHistorial()\" class\u003d\"boton-rojo\"\u003eüßπ Reiniciar Historial\u003c/button\u003e\n    \u003c/div\u003e\n\n    \u003ch3\u003eConversaci√≥n con QueryMia\u003c/h3\u003e\n    \u003cdiv id\u003d\"historial\"\u003e\u003c/div\u003e\n  \u003c/div\u003e\n\n  \u003cdiv id\u003d\"toast-copiado\"\u003e¬°Copiado!\u003c/div\u003e\n\n  \u003cbutton id\u003d\"btnScrollToTop\" class\u003d\"scroll-button oculto\" onclick\u003d\"scrollToTop()\"\u003e‚ñ≤\u003c/button\u003e\n  \u003cbutton id\u003d\"btnScrollToBottom\" class\u003d\"scroll-button oculto\" onclick\u003d\"scrollToBottom()\"\u003e‚ñº\u003c/button\u003e\n\n  \u003cscript\u003e\n    // --- INICIALIZACI√ìN Y EVENTOS ---\n    window.onload \u003d function () {\n      cargarHistorialLocal();\n      handleScrollButtons();\n      \n      const textElement \u003d document.getElementById(\u0027typewriter-text\u0027);\n      const textToType \u003d \u0027Hola, soy QueryMia. Estoy aqu√≠ para ayudarte a migrar tus consultas de SQL Server a Oracle para NEXO.\u0027;\n      textElement.innerHTML \u003d textToType;\n      textElement.style.width \u003d \u00270\u0027; \n      textElement.style.animation \u003d \u0027none\u0027;\n      textElement.offsetHeight; \n      textElement.style.animation \u003d \u0027\u0027; \n      \n      document.getElementById(\u0027historial\u0027).addEventListener(\u0027click\u0027, function(event) {\n          const targetMessage \u003d event.target.closest(\u0027.mensaje-usuario.collapsible\u0027);\n          if (targetMessage) {\n              targetMessage.classList.toggle(\u0027expanded\u0027);\n          }\n      });\n    };\n\n    window.addEventListener(\u0027scroll\u0027, handleScrollButtons);\n\n    // --- MANEJO DEL HISTORIAL Y CHAT ---\n    function enviarPrompt() {\n      const entrada \u003d document.getElementById(\"entrada\");\n      const texto \u003d entrada.value.trim();\n      if (!texto) return;\n\n      // Verificamos que la funci√≥n gtag exista antes de llamarla.\n      // Esto env√≠a el evento a Google Analytics.\n      if (typeof gtag \u003d\u003d\u003d \u0027function\u0027) {\n        gtag(\u0027event\u0027, \u0027enviar_consulta\u0027, {\n          \u0027event_category\u0027: \u0027interaccion_chat\u0027,\n          \u0027event_label\u0027: \u0027Click en bot√≥n Enviar\u0027\n        });\n      }\n\n      const historialDiv \u003d document.getElementById(\"historial\");\n      const nuevoMensajeDiv \u003d document.createElement(\u0027div\u0027);\n      nuevoMensajeDiv.className \u003d \u0027mensaje-usuario\u0027;\n      \n      // MODIFICADO: La conversi√≥n de saltos de l√≠nea se hace aqu√≠, no en la funci√≥n general\n      const textoEscapado \u003d escapeHTML(texto);\n      nuevoMensajeDiv.innerHTML \u003d textoEscapado.replace(/\\n/g, \u0027\u003cbr\u003e\u0027);\n      \n      historialDiv.appendChild(nuevoMensajeDiv);\n      \n      checkAndApplyCollapsible(nuevoMensajeDiv);\n      \n      entrada.value \u003d \"\";\n      historialDiv.scrollTop \u003d historialDiv.scrollHeight;\n\n      guardarHistorialLocal(historialDiv.innerHTML);\n      mostrarModalCarga(true);\n\n      google.script.run\n        .withSuccessHandler(respuesta \u003d\u003e {\n          const formateada \u003d formatearRespuesta(respuesta);\n          historialDiv.innerHTML +\u003d `\u003cdiv class\u003d\"mensaje-bot\"\u003eü§ñ \u003cstrong\u003eQueryMia:\u003c/strong\u003e\u003cbr\u003e${formateada}\u003c/div\u003e`;\n          historialDiv.scrollTop \u003d historialDiv.scrollHeight;\n          \n          guardarHistorialLocal(historialDiv.innerHTML);\n          \n          setTimeout(() \u003d\u003e {\n            aplicarResaltadoATodo();\n          }, 100);\n\n          mostrarModalCarga(false);\n        })\n        .withFailureHandler(error \u003d\u003e {\n          historialDiv.innerHTML +\u003d `\u003cdiv class\u003d\"mensaje-bot\"\u003e‚ùå \u003cstrong\u003eError:\u003c/strong\u003e ${error.message || error}\u003c/div\u003e`;\n          mostrarModalCarga(false);\n        })\n        .ejecutarFlujoGeminiDesdeHTML(texto);\n    }\n    \n    function checkAndApplyCollapsible(element) {\n        const MAX_HEIGHT \u003d 150;\n        if (element.scrollHeight \u003e MAX_HEIGHT) {\n            element.classList.add(\u0027collapsible\u0027);\n            element.title \u003d \"Haz clic para expandir o contraer el mensaje\";\n        }\n    }\n\n    function borrarHistorial() {\n      if (confirm(\"¬øEst√°s seguro de que quieres borrar toda la conversaci√≥n?\")) {\n        google.script.run\n          .withSuccessHandler(() \u003d\u003e {\n            document.getElementById(\"historial\").innerHTML \u003d \"\";\n            localStorage.removeItem(\"historialQueryMia\");\n          })\n          .limpiarHistorialGemini();\n      }\n    }\n\n    function guardarHistorialLocal(contenido) {\n      localStorage.setItem(\"historialQueryMia\", contenido);\n    }\n\n    function cargarHistorialLocal() {\n      const historialGuardado \u003d localStorage.getItem(\"historialQueryMia\");\n      if (historialGuardado) {\n        const historialDiv \u003d document.getElementById(\"historial\");\n        historialDiv.innerHTML \u003d historialGuardado;\n        \n        setTimeout(() \u003d\u003e {\n          historialDiv.querySelectorAll(\u0027.mensaje-usuario\u0027).forEach(msg \u003d\u003e {\n              checkAndApplyCollapsible(msg);\n          });\n          aplicarResaltadoATodo();\n          historialDiv.scrollTop \u003d historialDiv.scrollHeight;\n        }, 100);\n      }\n    }\n\n    // --- FORMATEO Y RENDERIZADO DE RESPUESTAS ---\n    function aplicarResaltadoATodo() {\n        document.querySelectorAll(\u0027pre code.hljs\u0027).forEach((block) \u003d\u003e {\n            if (!block.dataset.highlighted) {\n                hljs.highlightElement(block);\n                hljs.lineNumbersBlock(block);\n                block.dataset.highlighted \u003d \u0027true\u0027;\n            }\n        });\n    }\n\n    function formatearRespuesta(texto) {\n        // 1. Extraer bloques de c√≥digo para protegerlos del formateo\n        const bloquesCodigo \u003d [];\n        let textoSinCodigo \u003d texto.replace(/```(\\w+)?([\\s\\S]*?)```/g, (_, lenguaje, codigo) \u003d\u003e {\n            const idUnico \u003d `codigo-${Date.now()}-${Math.floor(Math.random() * 1000)}`;\n            const lenguajeFinal \u003d lenguaje ? lenguaje.trim().toUpperCase() : \"C√ìDIGO\";\n            const codigoEscapado \u003d escapeHTML(codigo.trim());\n            const placeholder \u003d `[[BLOQUE_CODIGO_${bloquesCodigo.length}]]`;\n            \n            bloquesCodigo.push({\n                placeholder: placeholder,\n                html: `\n                    \u003cdiv class\u003d\"contenedor-codigo\"\u003e\n                        \u003cdiv class\u003d\"titulo-codigo\"\u003e${lenguajeFinal}\u003c/div\u003e\n                        \u003cbutton class\u003d\"boton-copiar\" onclick\u003d\"copiarAlPortapapeles(this, \u0027${idUnico}\u0027)\"\u003eüìã Copiar\u003c/button\u003e\n                        \u003cpre\u003e\u003ccode id\u003d\"${idUnico}\" class\u003d\"hljs language-${lenguaje || \u0027sql\u0027}\"\u003e${codigoEscapado}\u003c/code\u003e\u003c/pre\u003e\n                    \u003c/div\u003e\n                `\n            });\n            return placeholder;\n        });\n\n        // 2. Procesar el texto restante l√≠nea por l√≠nea para Markdown de bloque\n        const lineas \u003d textoSinCodigo.trim().split(\u0027\\n\u0027);\n        let htmlResultante \u003d \u0027\u0027;\n        let enLista \u003d false;\n\n        for (const linea of lineas) {\n            // Encabezados\n            if (linea.startsWith(\u0027### \u0027)) {\n                if (enLista) { htmlResultante +\u003d \u0027\u003c/ol\u003e\\n\u0027; enLista \u003d false; }\n                htmlResultante +\u003d `\u003ch3\u003e${linea.substring(4)}\u003c/h3\u003e\\n`;\n                continue;\n            }\n            if (linea.startsWith(\u0027## \u0027)) {\n                if (enLista) { htmlResultante +\u003d \u0027\u003c/ol\u003e\\n\u0027; enLista \u003d false; }\n                htmlResultante +\u003d `\u003ch2\u003e${linea.substring(3)}\u003c/h2\u003e\\n`;\n                continue;\n            }\n            // Regla horizontal\n            if (linea.trim() \u003d\u003d\u003d \u0027---\u0027) {\n                if (enLista) { htmlResultante +\u003d \u0027\u003c/ol\u003e\\n\u0027; enLista \u003d false; }\n                htmlResultante +\u003d \u0027\u003chr\u003e\\n\u0027;\n                continue;\n            }\n            // Lista numerada\n            const matchLista \u003d linea.match(/^(\\d+)\\.\\s+(.*)/);\n            if (matchLista) {\n                if (!enLista) {\n                    htmlResultante +\u003d \u0027\u003col\u003e\\n\u0027;\n                    enLista \u003d true;\n                }\n                htmlResultante +\u003d `  \u003cli\u003e${matchLista[2]}\u003c/li\u003e\\n`;\n                continue;\n            }\n            \n            // Si se termina una lista\n            if (enLista) {\n                htmlResultante +\u003d \u0027\u003c/ol\u003e\\n\u0027;\n                enLista \u003d false;\n            }\n            \n            // P√°rrafos (l√≠neas no vac√≠as que no son otra cosa)\n            if (linea.trim()) {\n                htmlResultante +\u003d `\u003cp\u003e${linea}\u003c/p\u003e\\n`;\n            }\n        }\n        // Cerrar la lista si el texto termina con ella\n        if (enLista) {\n            htmlResultante +\u003d \u0027\u003c/ol\u003e\\n\u0027;\n        }\n\n        // 3. Aplicar formato de texto en l√≠nea (negrita, cursiva, etc.)\n        htmlResultante \u003d htmlResultante\n            .replace(/\\*\\*(.*?)\\*\\*/g, \u0027\u003cstrong\u003e$1\u003c/strong\u003e\u0027)\n            .replace(/\\*(.*?)\\*/g, \u0027\u003cem\u003e$1\u003c/em\u003e\u0027)\n            .replace(/`([^`]+)`/g, \u0027\u003ccode\u003e$1\u003c/code\u003e\u0027);\n\n        // 4. Reinsertar los bloques de c√≥digo en su lugar\n        for (const bloque of bloquesCodigo) {\n            // Reemplaza el placeholder, incluso si est√° envuelto en un \u003cp\u003e\n            htmlResultante \u003d htmlResultante.replace(`\u003cp\u003e${bloque.placeholder}\u003c/p\u003e`, bloque.html);\n            htmlResultante \u003d htmlResultante.replace(bloque.placeholder, bloque.html);\n        }\n\n        return htmlResultante;\n    }\n    \n    // --- CORREGIDO: Esta funci√≥n ahora solo escapa caracteres HTML. ---\n    function escapeHTML(texto) {\n      // Ya no convierte saltos de l√≠nea a \u003cbr\u003e, haciendo seguro su uso para bloques de c√≥digo.\n      return texto.replace(/\u0026/g, \"\u0026amp;\").replace(/\u003c/g, \"\u0026lt;\").replace(/\u003e/g, \"\u0026gt;\");\n    }\n\n    // --- FUNCIONES DE UTILIDAD (COPIAR, MODAL, TOAST, SCROLL) ---\n    function copiarAlPortapapeles(button, idElemento) {\n      const codigoElemento \u003d document.getElementById(idElemento);\n      if (!codigoElemento) return;\n\n      const textoACopiar \u003d codigoElemento.innerText;\n\n      navigator.clipboard.writeText(textoACopiar).then(() \u003d\u003e {\n        mostrarToast(\"üìã ¬°C√≥digo copiado!\");\n        const originalText \u003d button.innerHTML;\n        button.innerHTML \u003d \u0027‚úÖ ¬°Copiado!\u0027;\n        setTimeout(() \u003d\u003e {\n          button.innerHTML \u003d originalText;\n        }, 2000);\n      }).catch(err \u003d\u003e {\n        mostrarToast(\"‚ùå Error al copiar\");\n      });\n    }\n\n    function mostrarModalCarga(mostrar) {\n      document.getElementById(\"modal-cargando\").classList.toggle(\"oculto\", !mostrar);\n    }\n    \n    function mostrarToast(mensaje) {\n      const toast \u003d document.getElementById(\"toast-copiado\");\n      toast.textContent \u003d mensaje;\n      toast.classList.add(\"visible\");\n      setTimeout(() \u003d\u003e {\n        toast.classList.remove(\"visible\");\n      }, 2500);\n    }\n    \n    function handleScrollButtons() {\n      const btnTop \u003d document.getElementById(\u0027btnScrollToTop\u0027);\n      const btnBottom \u003d document.getElementById(\u0027btnScrollToBottom\u0027);\n      const scrollPos \u003d document.documentElement.scrollTop || document.body.scrollTop;\n      const scrollHeight \u003d document.documentElement.scrollHeight;\n      const clientHeight \u003d document.documentElement.clientHeight;\n\n      btnTop.classList.toggle(\u0027oculto\u0027, scrollPos \u003c 300);\n\n      const isAtBottom \u003d scrollHeight - scrollPos \u003c\u003d clientHeight + 50;\n      btnBottom.classList.toggle(\u0027oculto\u0027, isAtBottom || scrollPos \u003c 300);\n    }\n\n    function scrollToTop() {\n      window.scrollTo({ top: 0, behavior: \u0027smooth\u0027 });\n    }\n\n    function scrollToBottom() {\n      window.scrollTo({ top: document.documentElement.scrollHeight, behavior: \u0027smooth\u0027 });\n    }\n\n  \u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e"},{"id":"f27c853f-b69b-485b-860a-d516400f8a23","name":"üóÇÔ∏èFunctionFront","type":"server_js","source":"/**\n * Limpia el historial de Gemini de forma exhaustiva y garantizada.\n * Esta funci√≥n realiza tres acciones de limpieza para cubrir todos los casos:\n * 1. Limpia el historial de la \"b√≥veda privada del usuario\" (UserProperties).\n * 2. Limpia el historial de la \"b√≥veda compartida del script\" (ScriptProperties).\n * 3. Llama al m√©todo .clearMessages() de la clase GeminiChatAPI como buena pr√°ctica.\n */\nfunction limpiarHistorialGemini() {\n  const claveHistorial \u003d \u0027GEMINI_CHAT_CONTEXT\u0027; // La clave que usa tu clase.\n  let limpiezaExitosa \u003d false;\n\n  // --- 1. Limpieza Directa de la B√≥veda del Usuario (la m√°s importante) ---\n  try {\n    PropertiesService.getUserProperties().deleteProperty(claveHistorial);\n    Logger.log(\"‚úÖ Historial de la b√≥veda del usuario (UserProperties) limpiado.\");\n    limpiezaExitosa \u003d true;\n  } catch (e) {\n    Logger.log(`‚ö†Ô∏è Error al limpiar UserProperties: ${e.message}`);\n  }\n\n  // --- 2. Limpieza Directa de la B√≥veda del Script (para estar seguros) ---\n  try {\n    PropertiesService.getScriptProperties().deleteProperty(claveHistorial);\n    Logger.log(\"‚úÖ Historial de la b√≥veda del script (ScriptProperties) limpiado.\");\n    limpiezaExitosa \u003d true;\n  } catch (e) {\n    Logger.log(`‚ö†Ô∏è Error al limpiar ScriptProperties: ${e.message}`);\n  }\n\n  // --- 3. Limpieza a trav√©s de la Clase (buena pr√°ctica) ---\n  try {\n    const model \u003d \u0027gemini-2.5-flash\u0027; // O el modelo que uses\n    const apiKey \u003d PropertiesService.getScriptProperties().getProperty(\u0027GEMINI_API_KEY\u0027);\n    \n    if (apiKey) {\n      const chat \u003d new GeminiChatAPI(model, apiKey);\n      chat.clearMessages(); // Este m√©todo ya imprime su propio log de √©xito.\n      limpiezaExitosa \u003d true;\n    } else {\n        Logger.log(\"‚ÑπÔ∏è No se pudo instanciar la clase para la limpieza final porque la API Key no fue encontrada.\");\n    }\n  } catch(e) {\n    Logger.log(`‚ö†Ô∏è Error al limpiar a trav√©s de la clase: ${e.message}`);\n  }\n  \n  // --- Mensaje Final ---\n  if (limpiezaExitosa) {\n    Logger.log(\"--- üöÄ Limpieza de Historial Completada ---\");\n  } else {\n    Logger.log(\"--- ‚ùå La limpieza del historial no pudo completarse con √©xito. Revisa los errores anteriores. ---\");\n  }\n}"},{"id":"907bdc49-6ad2-455e-9423-ece11051b95d","name":"üì¶FunctionFilterData","type":"server_js","source":"function getFilteredData(args) {\n    try {\n        const URL_LIBRO \u003d \"1ZeUVrbdyS-oBnsvngsrRqwWa8FUI_rxLZ9IdB8Hgpeo\";\n        const NOMBRE_HOJA \u003d \"Diccionario\";\n        const spreadsheet \u003d SpreadsheetApp.openById(URL_LIBRO);\n        const sheet \u003d spreadsheet.getSheetByName(NOMBRE_HOJA);\n\n        if (!sheet) {\n            Logger.log(`La hoja \u0027${NOMBRE_HOJA}\u0027 no se encontr√≥ en el libro con ID \u0027${URL_LIBRO}\u0027.`);\n            return { error: `La hoja \u0027${NOMBRE_HOJA}\u0027 no se encontr√≥ en el libro con ID \u0027${URL_LIBRO}\u0027.` };\n        }\n\n        const dataRange \u003d sheet.getDataRange();\n        const values \u003d dataRange.getValues();\n\n        if (values.length \u003d\u003d\u003d 0) {\n            Logger.log(`La hoja \u0027${NOMBRE_HOJA}\u0027 est√° vac√≠a.`);\n            return { data: [], message: `La hoja \u0027${NOMBRE_HOJA}\u0027 est√° vac√≠a. No hay datos para filtrar.` };\n        }\n\n        // Convertir los encabezados de la hoja a MAY√öSCULAS para una coincidencia robusta\n        const headers \u003d values[0].map(h \u003d\u003e typeof h \u003d\u003d\u003d \u0027string\u0027 ? h.toUpperCase() : h);\n        const filteredRows \u003d [];\n\n        const filterCriteria \u003d args.params;\n\n        // Validar que filterCriteria y TABLA_MISS est√©n presentes\n        if (typeof filterCriteria !\u003d\u003d \u0027object\u0027 || filterCriteria \u003d\u003d\u003d null ||\n            !filterCriteria.TABLA_MISS || !Array.isArray(filterCriteria.TABLA_MISS) || filterCriteria.TABLA_MISS.length \u003d\u003d\u003d 0) {\n            const errorMessage \u003d \"Error: \u0027params\u0027 no es un objeto v√°lido, o TABLA_MISS est√° ausente/vac√≠o en los argumentos de la herramienta.\";\n            Logger.log(errorMessage + \" Argumentos recibidos: \" + JSON.stringify(args));\n            return { error: errorMessage, receivedArgs: args };\n        }\n\n        // Obtener los √≠ndices de las columnas TABLA_MIS y CAMPO_MIS en la hoja\n        const tablaMisColIndex \u003d headers.indexOf(\u0027TABLA_MIS\u0027);\n        const campoMisColIndex \u003d headers.indexOf(\u0027CAMPO_MIS\u0027);\n\n        // Validar que las columnas cr√≠ticas existan en la hoja\n        if (tablaMisColIndex \u003d\u003d\u003d -1) {\n            Logger.log(\"Error: La columna \u0027TABLA_MIS\u0027 no se encontr√≥ en los encabezados de la hoja \u0027Diccionario\u0027.\");\n            return { error: \"Error: La hoja de diccionario no est√° configurada como se espera. Falta la columna \u0027TABLA_MIS\u0027.\" };\n        }\n        // CAMPO_MIS es opcional en la llamada, pero si el modelo lo env√≠a, debe existir en la hoja.\n        // Si no se env√≠a (para SELECT *), este √≠ndice puede ser -1, lo que se manejar√° al intentar usarlo.\n\n        // Iterar sobre las filas de datos (empezando desde la segunda fila)\n        for (let i \u003d 1; i \u003c values.length; i++) {\n            const row \u003d values[i];\n            let matchesAllCriteria \u003d true;\n\n            // Filtrar por TABLA_MIS (obligatorio)\n            const rowTablaMisValue \u003d typeof row[tablaMisColIndex] \u003d\u003d\u003d \u0027string\u0027 ? row[tablaMisColIndex].toUpperCase() : row[tablaMisColIndex];\n            const requiredTablaMissValues \u003d filterCriteria.TABLA_MISS.map(v \u003d\u003e v.toUpperCase()); // Convertir a may√∫sculas para coincidencia\n\n            if (!requiredTablaMissValues.includes(rowTablaMisValue)) {\n                matchesAllCriteria \u003d false;\n            }\n\n            // Filtrar por CAMPO_MISS (opcional) - solo si se proporcion√≥ en los argumentos\n            if (matchesAllCriteria \u0026\u0026 filterCriteria.CAMPO_MISS \u0026\u0026 filterCriteria.CAMPO_MISS.length \u003e 0) {\n                // Verificar que la columna CAMPO_MIS exista en la hoja, ya que se est√° usando\n                if (campoMisColIndex \u003d\u003d\u003d -1) {\n                    Logger.log(\"Error: La columna \u0027CAMPO_MIS\u0027 no se encontr√≥ en los encabezados de la hoja \u0027Diccionario\u0027, pero se intent√≥ filtrar por ella.\");\n                    return { error: \"Error: La hoja de diccionario no est√° configurada como se espera. Falta la columna \u0027CAMPO_MIS\u0027 para el filtrado de campos.\" };\n                }\n\n                const rowCampoMisValue \u003d typeof row[campoMisColIndex] \u003d\u003d\u003d \u0027string\u0027 ? row[campoMisColIndex].toUpperCase() : row[campoMisColIndex];\n                const requiredCampoMissValues \u003d filterCriteria.CAMPO_MISS.map(v \u003d\u003e v.toUpperCase()); // Convertir a may√∫sculas para coincidencia\n\n                if (!requiredCampoMissValues.includes(rowCampoMisValue)) {\n                    matchesAllCriteria \u003d false;\n                }\n            }\n\n            if (matchesAllCriteria) {\n                filteredRows.push(row);\n            }\n        }\n\n        return { data: filteredRows, message: `Se encontraron ${filteredRows.length} filas que coinciden con los criterios.` };\n\n    } catch (e) {\n        Logger.log(`Error cr√≠tico al obtener datos filtrados: ${e.toString()}`);\n        return { error: `Error interno al procesar los datos: ${e.message}` };\n    }\n}\n\n\n\n\n// --- Versi√≥n Corregida de la funci√≥n testGetFilteredData ---\nfunction testGetFilteredData() {\n  Logger.clear();\n\n  // Ejemplo 1: Estructura correcta para tu primer filtro.\n  const filter1 \u003d {\n    \"params\": { // \u003c--- ¬°A√ëADIR ESTO!\n      \"CAMPO_MISS\": [\"SK_CLIENTE\", \"SALDO_CAPITAL\"],\n      \"TABLA_MISS\": [\"FACT_PRESTAMOS_MES\"]\n    }\n  };\n  const result1 \u003d getFilteredData(filter1);\n  Logger.log(\u0027Resultados para Ejemplo 1:\u0027);\n  Logger.log(JSON.stringify(result1, null, 2));\n\n\n  // Ejemplo 2: Corregido. Se necesita \"params\" y la clave obligatoria \"TABLA_MIS\".\n  const filter2 \u003d {\n    \"params\": { // \u003c--- ¬°A√ëADIR ESTO!\n      \"CAMPO_MISS\": [\"SK_CLIENTE\"], // Se convierte en array para consistencia\n      \"TABLA_MISS\": [\"FACT_PRESTAMOS_MES\"] // La funci√≥n requiere esta clave para funcionar\n    }\n  };\n  const result2 \u003d getFilteredData(filter2);\n  Logger.log(\u0027Resultados para Ejemplo 2:\u0027);\n  Logger.log(JSON.stringify(result2, null, 2));\n\n\n  // Ejemplo 3: Corregido. Se envuelve en \"params\" y se llama al filtro correcto (filter3).\n  const filter3 \u003d {\n    \"params\": { // \u003c--- ¬°A√ëADIR ESTO!\n      \"CAMPO_MISS\": [\"SK_CLIENTE\"],\n      \"TABLA_MISS\": [\"FACT_PRESTAMOS_MES\"]\n      // \"OTRA_COLUMNA\" no ser√° procesada por getFilteredData, pero la estructura es correcta.\n    }\n  };\n  const result3 \u003d getFilteredData(filter3); // \u003c-- CORREGIDO: Llamaba a filter1 por error\n  Logger.log(\u0027Resultados para Ejemplo 3:\u0027);\n  Logger.log(JSON.stringify(result3, null, 2));\n}\n\n"},{"id":"c1f460b0-7c06-4c9a-9900-4388fef3ad36","name":"üì¶FunctionContexInfo","type":"server_js","source":"/**\n * Genera un texto contextual detallado para el LLM, describiendo la migraci√≥n\n * de campos y tablas de MISS a NEXO por cada fila de datos filtrados.\n *\n * @param {object} getFilteredDataResult - El objeto resultado de la funci√≥n getFilteredData().\n * Se espera un objeto con la estructura { data: [ [fila1], [fila2], ... ], message: \"...\" }\n * o { error: \"...\" }.\n * @returns {string} Un texto descriptivo para el LLM por cada fila de datos,\n * o un mensaje de error si no hay informaci√≥n relevante.\n */\nfunction contextInfo(getFilteredDataResult) {\n  // Manejo de errores iniciales de la funci√≥n getFilteredData\n  if (getFilteredDataResult.error) {\n    Logger.log(\"Error en los datos de entrada para contextInfo: \" + getFilteredDataResult.error);\n    return \"No se pudo generar contexto para la migraci√≥n. Error en la recuperaci√≥n de datos: \" + getFilteredDataResult.error;\n  }\n\n  const data \u003d getFilteredDataResult.data;\n\n  // Manejo de caso sin datos filtrados\n  if (!data || data.length \u003d\u003d\u003d 0) {\n    Logger.log(\"No se encontraron datos filtrados para generar contexto.\");\n    return \"No se encontr√≥ informaci√≥n de contexto relevante para la migraci√≥n de las tablas y campos solicitados.\";\n  }\n\n  let contextText \u003d \"La siguiente informaci√≥n de contexto sobre la migraci√≥n de elementos MIS a NEXO ha sido recuperada:\\n\\n\";\n\n  // Organizaci√≥n de las columnas por √≠ndice. Aseg√∫rate de que estos √≠ndices coincidan con tu hoja.\n  const COL_TABLA_MISS \u003d 0;\n  const COL_CAMPO_MISS \u003d 1;\n  const COL_TABLA_NEXO \u003d 2;\n  const COL_CAMPO_NEXO \u003d 3;\n  const COL_TIPO_DATO \u003d 4;\n  const COL_LONGITUD \u003d 5;\n  const COL_JOIN \u003d 6;\n  const COL_LLAMAR_CAMPO \u003d 7;\n\n  // Iterar sobre cada fila de datos para construir el texto.\n  data.forEach((row, index) \u003d\u003e {\n    // Validar que la fila tenga suficientes columnas para evitar errores de √≠ndice.\n    // Asumimos que LLAMAR_CAMPO (√≠ndice 7) es la columna m√°s alta que necesitas.\n    if (row.length \u003c\u003d COL_LLAMAR_CAMPO) {\n      Logger.log(`Advertencia: La fila ${index + 1} no tiene suficientes columnas para generar el contexto completo.`);\n      // Puedes optar por saltar esta fila o generar un contexto parcial.\n      // Aqu√≠, generamos un mensaje de error espec√≠fico para la fila.\n      contextText +\u003d `Fila ${index + 1}: Informaci√≥n incompleta para la migraci√≥n. Faltan datos.\\n\\n`;\n      return; // Saltar a la siguiente iteraci√≥n\n    }\n\n    // Extraer los valores de la fila, asegur√°ndose de que no sean nulos o indefinidos\n    const tablaMiss \u003d row[COL_TABLA_MISS] || \"N/A\";\n    const campoMiss \u003d row[COL_CAMPO_MISS] || \"N/A\";\n    const tablaNexo \u003d row[COL_TABLA_NEXO] || \"N/A\";\n    const campoNexo \u003d row[COL_CAMPO_NEXO] || \"N/A\";\n    const join \u003d row[COL_JOIN] || \"sin relaci√≥n JOIN especificada\";\n    const llamarCampo \u003d row[COL_LLAMAR_CAMPO] || \"no especificado\";\n    const tipoDato \u003d row[COL_TIPO_DATO] || \"N/A\";\n    const longitud \u003d row[COL_LONGITUD] || \"N/A\";\n\n    // Validar si los campos esenciales para la oraci√≥n est√°n presentes.\n    // Si alguno de los campos clave es \"N/A\", consideramos que no hay contexto suficiente.\n    if (tablaMiss \u003d\u003d\u003d \"N/A\" || campoMiss \u003d\u003d\u003d \"N/A\" || tablaNexo \u003d\u003d\u003d \"N/A\" || campoNexo \u003d\u003d\u003d \"N/A\" || llamarCampo \u003d\u003d\u003d \"N/A\") {\n      Logger.log(`Advertencia: Fila ${index + 1} tiene valores nulos o incompletos para generar el contexto de migraci√≥n.`);\n      contextText +\u003d `Fila ${index + 1}: No se pudo generar contexto de migraci√≥n para este elemento debido a datos faltantes.\\n\\n`;\n      return; // Saltar a la siguiente iteraci√≥n\n    }\n\n    // Construir el texto deseado para esta fila\n    contextText +\u003d `La consulta original del usuario utiliza la tabla **${tablaMiss}**, que contiene el campo **${campoMiss}**.\n    Para migrar esta consulta a Oracle, reemplaza esta tabla por **${tablaNexo}** y realiza una relaci√≥n usando el campo **${campoNexo}**.\n    Si es necesario, agrega las tablas relacionadas que no est√°n en la consulta original. Usa **${join}** para construir los **JOINs** requeridos.\n    Cuando hagas la selecci√≥n de campos (SELECT y WHERE), utiliza el campo **${llamarCampo}** en lugar de **${campoNexo}**.\n    Por √∫ltimo, mant√©n los mismos valores de filtrado que se encuentran en la consulta original.\n    Ten presente esta informacion si requieres crear una tabla temporal para este campo puedes usar el tipo de dato **${tipoDato}** con logitud **${longitud}**\n`;\n  });\n\n  // Si despu√©s de procesar las filas, el texto sigue siendo solo el encabezado,\n  // significa que ninguna fila pudo generar un contexto v√°lido.\n  if (contextText \u003d\u003d\u003d \"La siguiente informaci√≥n de contexto sobre la migraci√≥n de elementos MISS a NEXO ha sido recuperada:\\n\\n\") {\n    return \"No se pudo generar un contexto de migraci√≥n v√°lido para las tablas. Verifica los datos en el diccionario.\";\n  }\n\n  return contextText.trim(); // Eliminar cualquier espacio o salto de l√≠nea extra al final\n}\n"},{"id":"6c642df8-1a0e-4ada-898c-ada9949bcca9","name":"üì¶FunctionViewHistory","type":"server_js","source":"/**\n * Herramienta de depuraci√≥n robusta para imprimir el historial activo de Gemini.\n * Realiza las siguientes acciones:\n * 1. Busca el historial en la \"b√≥veda privada del usuario\" (UserProperties), que es la ubicaci√≥n correcta.\n * 2. Si no lo encuentra all√≠, busca en la \"b√≥veda compartida del script\" (ScriptProperties) como respaldo.\n * 3. Si encuentra el historial, lo formatea y lo imprime de manera legible.\n * 4. Si el contenido no es un historial v√°lido (JSON), lo informa sin generar un error.\n * 5. Si no encuentra historial en ninguna parte, lo comunica claramente.\n */\nfunction imprimirHistorialActivo() {\n  const claveHistorial \u003d \u0027GEMINI_CHAT_CONTEXT\u0027; // La clave correcta que usa tu clase.\n  let historialEncontrado \u003d false;\n\n  Logger.log(\"üîé Buscando historial activo de Gemini...\");\n\n  // --- 1. B√∫squeda en la B√≥veda del Usuario (Ubicaci√≥n Principal) ---\n  try {\n    const userProperties \u003d PropertiesService.getUserProperties();\n    const historialComoString \u003d userProperties.getProperty(claveHistorial);\n\n    if (historialComoString) {\n      historialEncontrado \u003d true;\n      Logger.log(\"‚úÖ Historial encontrado en la b√≥veda del USUARIO (UserProperties).\");\n      \n      // Intenta formatear e imprimir el historial\n      try {\n        const historialComoObjeto \u003d JSON.parse(historialComoString);\n        Logger.log(\"üìú --- Contenido del Historial --- üìú\");\n        Logger.log(JSON.stringify(historialComoObjeto, null, 2));\n        Logger.log(\"üìú --- Fin del Historial --- üìú\");\n      } catch (e) {\n        // Maneja el caso en que el contenido no sea JSON\n        Logger.log(\"‚ö†Ô∏è El contenido encontrado no es un historial JSON v√°lido.\");\n        Logger.log(`   Contenido (texto plano): ${historialComoString}`);\n      }\n      return; // Termina la ejecuci√≥n si ya lo encontramos aqu√≠.\n    }\n  } catch (e) {\n    Logger.log(`‚ùå Error al intentar leer de UserProperties: ${e.message}`);\n  }\n\n  // --- 2. B√∫squeda en la B√≥veda del Script (Respaldo) ---\n  if (!historialEncontrado) {\n    try {\n      const scriptProperties \u003d PropertiesService.getScriptProperties();\n      const historialComoString \u003d scriptProperties.getProperty(claveHistorial);\n\n      if (historialComoString) {\n        historialEncontrado \u003d true;\n        Logger.log(\"‚úÖ Historial encontrado en la b√≥veda del SCRIPT (ScriptProperties).\");\n        \n        try {\n          const historialComoObjeto \u003d JSON.parse(historialComoString);\n          Logger.log(\"üìú --- Contenido del Historial --- üìú\");\n          Logger.log(JSON.stringify(historialComoObjeto, null, 2));\n          Logger.log(\"üìú --- Fin del Historial --- üìú\");\n        } catch (e) {\n          Logger.log(\"‚ö†Ô∏è El contenido encontrado no es un historial JSON v√°lido.\");\n          Logger.log(`   Contenido (texto plano): ${historialComoString}`);\n        }\n        return;\n      }\n    } catch (e) {\n      Logger.log(`‚ùå Error al intentar leer de ScriptProperties: ${e.message}`);\n    }\n  }\n\n  // --- 3. Mensaje si no se encontr√≥ nada ---\n  if (!historialEncontrado) {\n    Logger.log(\"‚úÖ No se encontr√≥ ning√∫n historial activo con la clave \u0027\" + claveHistorial + \"\u0027 en ninguna b√≥veda.\");\n  }\n}"}]}